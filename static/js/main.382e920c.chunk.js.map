{"version":3,"sources":["components/UnsafeScriptsWarning.jsx","components/StockRow.jsx","components/MarketTrendArrow.jsx","components/StocksList.jsx","chartConfig.js","components/StocksGraph.jsx","components/StocksLoaderStatus.jsx","components/clientStocks/ClientStock.jsx","components/MainDashboard.jsx","components/Dashboard.jsx","API.js","components/common/InfoBox.jsx","components/AccountSummary.jsx","DashboardConstants.jsx","components/LogoutButton.jsx","auth/loginForm.jsx","assets/loading.svg","components/LandingPage.jsx","App.js","reportWebVitals.js","index.js"],"names":["UnsafeScriptsWarning","props","className","StockRow","getStockValueColor","stock","current_value","history","slice","value","this","stock_data","is_selected","id","stock_name","onClick","toggleStockSelection","toUpperCase","toFixed","data","map","color","date","time","React","Component","MarketTrendArrow","getArrow","current_trend","title","StocksList","render","online","resetData","areStocksLoaded","Table","bordered","hover","responsive","market_trend","Object","keys","stocks","index","current_stock","colSpan","chartJsConfig","scales","xAxes","type","distribution","ticks","source","displayFormats","second","unit","scaleLabel","display","labelString","yAxes","beginAtZero","stepValue","steps","pan","enabled","mode","zoom","drag","chartColors","chartDataset","stock_values","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","StocksGraph","updateChart","chart","refs","chartInstance","length","datasets","update","chart_dataset","find","dataset","getStockValues","concat","splice","indexOf","componentDidUpdate","t","Date","y","style","margin","options","ref","StocksLoaderStatus","connectionError","ClientStock","state","show","quantity","selectedStock","purchasedStocks","localUser","defaultAmount","validation","parseInt","buyStocks","flag","tempdeafaultAmount","tempPurchasedStocks","valid","myShares","buyingPrice","alert","setState","localStorageData","JSON","parse","localStorage","getItem","setItem","stringify","sellStocks","currentAmount","temppurchasedStocks","difference","reset","componentDidMount","currentUser","localStoragePurchasedStocks","localStorageDefaultAmount","getPL","pl","costPrice","percentage","Card","Body","Row","Col","Form","Group","Label","Control","as","custom","onChange","e","target","required","min","max","Button","xs","striped","Skeleton","variant","width","withAuth0","stocksUrl","MainDashboard","undefined","connection","WebSocket","onmessage","saveNewStockValues","onclose","event","hideSpinner","result","up_values_count","down_values_count","current_time","now","new_stocks","Number","push","newMarketTrend","up_count","down_count","pop","showSpinner","Dashboard","hasError","error","info","console","log","user","getUserData","InfoBox","labelText","labelClass","contentData","contentClass","AccountSummary","accountData","personalInfo","address","getDataFromAPI","a","axios","get","then","res","status","results","catch","err","getUserInfo","location","picture","name","phone","age","dob","email_verified","given_name","auth0","Container","src","image","large","alt","height","lg","first","last","street","number","city","country","postcode","DASHBOARD_URL","ACCOUNT_URL","LogoutButton","useAuth0","loginWithRedirect","isAuthenticated","logout","LandingPage","href","textDecoration","App","path","component","from","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"2WAwBeA,G,OAtBc,SAAAC,GAC3B,OACE,sBAAKC,UAAU,0BAAf,UACE,sBAAKA,UAAU,cAAf,UACE,qBAAKA,UAAU,mBAAf,SACE,sBAAMA,UAAU,aAElB,qBAAKA,UAAU,oBAAf,2BAIF,qBAAKA,UAAU,OAAf,SACE,sBAAKA,UAAU,eAAf,sCAC6B,uDAD7B,mBAEE,uBAFF,qBAE4B,+CAF5B,yD,0CC0BOC,E,4MAlCbC,mBAAqB,SAACC,GACpB,OAAGA,EAAMC,cAAgBD,EAAME,QAAQC,OAAO,GAAG,GAAGC,MAC3C,MAEDJ,EAAMC,cAAgBD,EAAME,QAAQC,OAAO,GAAG,GAAGC,MAChD,QAGA,M,uDAID,IAAD,OACHF,EAAUG,KAAKT,MAAMU,WAAWJ,QACpC,OAEE,cADA,CACA,MAAIL,UAAYQ,KAAKT,MAAMU,WAAWC,YAAc,WAAa,KAAOC,GAAIH,KAAKT,MAAMa,WAAYC,QAAS,WAAK,EAAKd,MAAMe,qBAAqB,EAAKf,MAAMa,aAA5J,UACE,6BAAKJ,KAAKT,MAAMa,WAAWG,gBAC3B,oBAAIf,UAAWQ,KAAKN,mBAAmBM,KAAKT,MAAMU,YAAlD,SACGD,KAAKT,MAAMU,WAAWL,cAAcY,QAAQ,KAE/C,6BACE,cAAC,aAAD,CAAYC,KAAMZ,EAAQa,KAAI,SAACb,GAAc,OAAOA,EAAQE,SAA5D,SACE,cAAC,iBAAD,CAAgBY,MAAM,aAG1B,oBAAInB,UAAU,aAAd,SACE,cAAC,IAAD,CAASoB,KAAOf,EAAQC,OAAO,GAAG,GAAGe,gB,GA7BxBC,IAAMC,WCqBdC,E,4MArBbC,SAAW,WACT,MAAgC,OAA7B,EAAK1B,MAAM2B,cACL,sBAAM1B,UAAU,WAAhB,oBAE4B,SAA7B,EAAKD,MAAM2B,cACV,sBAAM1B,UAAU,aAAhB,oBAGA,K,uDAKT,OACE,sBAAM2B,MAAM,eAAe3B,UAAW,oBAAtC,SACGQ,KAAKiB,iB,GAjBiBH,IAAMC,W,SCyDtBK,G,OArDI,SAAC7B,GAClB,OACE,sBAAKC,UAAU,OAAOW,GAAG,cAAzB,UACE,qBAAKX,UAAU,cAAf,SACE,sBAAKA,UAAU,oBAAf,wBAGE,cAAC,WAAD,CACE6B,OAAQ,gBAAGC,EAAH,EAAGA,OAAH,OACN,sBAAM9B,UAAW8B,EAAS,iBAAmB,gBAA7C,SACGA,EAAS,OAAS,eAN3B,OAWE,wBAAQ9B,UAAU,kBAAkBa,QAASd,EAAMgC,UAAnD,gCAGJ,sBAAK/B,UAAU,oBAAf,UACID,EAAMiC,kBAAoB,mBAAGhC,UAAU,0BAAb,iDAAiF,KAC7G,eAACiC,EAAA,EAAD,CAAOC,UAAQ,EAACC,OAAK,EAACC,YAAU,EAAhC,UACE,uBAAOpC,UAAU,aAAjB,SACE,+BACE,sCACA,uCAEE,cAAC,EAAD,CAAkB0B,cAAe3B,EAAMsC,kBAEzC,yCACA,iDAGJ,kCACGC,OAAOC,KAAKxC,EAAMyC,QAAQtB,KAAI,SAACN,EAAY6B,GAExC,IAAIC,EAAgB3C,EAAMyC,OAAO5B,GACjC,OACE,cAAC,EAAD,CACcA,WAAYA,EACxBH,WAAYiC,EACZ5B,qBAAsBf,EAAMe,sBAFvB2B,MAOX1C,EAAMiC,kBAAoB,KAAO,6BAAI,oBAAIW,QAAQ,IAAZ,mD,QCjDtCC,EAAgB,CACzBR,YAAY,EACZS,OAAQ,CACNC,MAAO,CAAC,CACNC,KAAM,OACNC,aAAc,SACdC,MAAO,CACLC,OAAQ,QAEV7B,KAAM,CACJ8B,eAAgB,CAACC,OAAQ,aACzBC,KAAM,UAERC,WAAY,CACVC,SAAS,EACTC,YAAa,UAGjBC,MAAO,CAAC,CACNR,MAAO,CACLS,aAAa,EACbC,UAAW,GACXC,MAAO,IAETN,WAAY,CACVC,SAAS,EACTC,YAAa,gBAInBK,IAAK,CACHC,SAAS,EACTC,KAAM,KAERC,KAAM,CACJF,SAAS,EACTG,MAAM,EACNF,KAAM,MAMGG,EAAc,CAAC,mBAAoB,mBAAoB,mBAAoB,mBAAoB,oBAAqB,oBAAqB,mBAAoB,mBAAoB,mBAAoB,oBAAqB,oBAAqB,oBAAqB,qBAAsB,oBAAqB,mBAAoB,mBAAoB,oBAAqB,kBAAmB,iBAAkB,iBAAkB,kBAAmB,mBAEtbC,EAAe,SAACvD,EAAYO,EAAOiD,GAC9C,MAAO,CACLC,MAAOzD,EAAWG,cAClBuD,MAAM,EACNC,YAAa,EACbC,gBAAiBrD,EACjBsD,YAAatD,EACbuD,eAAgB,OAChBC,gBAAiB,QACjBC,iBAAkBzD,EAClB0D,qBAAsB,OACtBC,iBAAkB,EAClBC,iBAAkB,EAClBC,0BAA2B7D,EAC3B8D,sBAAuB9D,EACvB+D,sBAAuB,EACvBC,YAAa,EACbC,eAAgB,GAChBnE,KAAMmD,IC+BGiB,E,4MA1FbC,YAAc,WACZ,IAAIC,EAAQ,EAAKC,KAAKD,MAAME,cAE5B,GAA6C,IAA1CnD,OAAOC,KAAK,EAAKxC,MAAMyC,QAAQkD,OAGhC,OADAH,EAAMtE,KAAK0E,SAAW,GACfJ,EAAMK,SAGftD,OAAOC,KAAK,EAAKxC,MAAMyC,QAAQtB,KAAI,SAACN,EAAY6B,GAE9C,IAAIC,EAAgB,EAAK3C,MAAMyC,OAAO5B,GAClCiF,EAAgBN,EAAMtE,KAAK0E,SAASG,MAAK,SAACC,GAC5C,OAAOA,EAAQ1B,QAAUzD,EAAWG,iBAGtC,GAAG2B,EAAchC,YACjB,CACE,IAAIgC,EAAgB,EAAK3C,MAAMyC,OAAO5B,GACnCiF,EAGDA,EAAc5E,KAAO,EAAK+E,eAAetD,GAKtCA,IAED6C,EAAMtE,KAAK0E,SAAWJ,EAAMtE,KAAK0E,SAASM,OACxC,CACE9B,EAAavD,EAAYsD,EAAYzB,GAAQ,EAAKuD,eAAetD,YAQtEmD,GAGDN,EAAMtE,KAAK0E,SAASO,OAAOX,EAAMtE,KAAK0E,SAASQ,QAAQN,GAAgB,GAG3EN,EAAMK,a,EAIVQ,mBAAqB,WACnB,EAAKd,e,EAIPU,eAAiB,SAAC7F,GAChB,OAAOA,EAAME,QAAQa,KAAI,SAACb,GACxB,MAAO,CAACgG,EAAG,IAAIC,KAAKjG,EAAQgB,MAAOkF,EAAGlG,EAAQE,W,uDAShD,OACE,sBAAKP,UAAW,kBAAmBwG,MAAO,CAACC,OAAO,QAAlD,UACE,qBAAKzG,UAAU,cAAf,SACE,qBAAKA,UAAU,oBAAf,qBAIF,sBAAKA,UAAU,eAAf,UACE,mBAAGA,UAAU,0BAAb,SAEIQ,KAAKgF,KAAKD,OACV/E,KAAKgF,KAAKD,MAAME,cAAcxE,KAAK0E,SAASD,OAAS,EAAI,qCAAuC,oDAGpG,cAAC,OAAD,CACEzE,KAAM,CAAC0E,SAAU,IACjBe,QAAS9D,EACT+D,IAAI,oB,GApFUrF,IAAMC,WCejBqF,EAjBY,SAAA7G,GACzB,OAAGA,EAAM8G,gBAEL,sBAAK7G,UAAU,YAAf,UACE,sBAAMA,UAAU,kBAAhB,gFACA,uBAFF,4BAOA,qBAAKA,UAAU,sBAAf,SACE,sBAAMA,UAAU,SAAhB,sB,8DCPF8G,E,4MACLC,MAAQ,CACPC,MAAM,EACNC,SAAU,KACVC,cAAe,KACfC,gBAAiB,GACjBC,UAAW,KACXC,cAAe,K,EAEhBC,WAAa,WAAO,IAAD,EACgB,EAAKP,MAAjCE,EADY,EACZA,SAAUC,EADE,EACFA,cAEhB,MAAwB,kBADxBD,EAAWM,SAASN,KACgBA,GAAY,GAAKA,EAAW,KAClC,kBAAlBC,GAAgD,OAAlBA,I,EAK3CM,UAAY,WAAO,IAAD,EAOb,EAAKT,MALRE,EAFgB,EAEhBA,SACAC,EAHgB,EAGhBA,cACAC,EAJgB,EAIhBA,gBACAE,EALgB,EAKhBA,cACAD,EANgB,EAMhBA,UAEIK,EACJ,EADUC,EAEVL,EAF8BM,EAG9BR,EAEKS,EAAQ,EAAKN,aAEnB,GADAL,EAAWM,SAASN,GAChBW,EAAO,CAAC,IACNC,EAA0B,EAAhBC,EAAmB,EAClCD,GAAYZ,EAEgC,IAAxC3E,OAAOC,KAAK4E,GAAiBzB,QAChCoC,EAAc,EAAK/H,MAAMyC,OAAO0E,GAAe9G,cAAcY,QAAQ,GACrE0G,GAA0CI,EAAcD,EACxDF,EAAoBT,GAAiB,CACpC3G,MAAOuH,EACPb,SAAUA,EACVY,SAAUA,KAIXvF,OAAOC,KAAK4E,GAAiBjG,KAAI,SAACf,GACjC2H,EAAc,EAAK/H,MAAMyC,OAAO0E,GAAe9G,cAAcY,QAC5D,GAEGb,IAAU+G,IACbW,EAAWV,EAAgBhH,GAAO0H,SAAWZ,EAC7CS,GAA0CI,EAAcD,EACxDF,EAAoBT,GAAiB,CACpC3G,MAAOuH,EACPb,SAAUA,EACVY,SAAUA,GAEXJ,EAAO,MAIJA,IACJC,GAA0CI,EAAcD,EACxDF,EAAoBT,GAAiB,CACpC3G,MAAOuH,EACPb,SAAUA,EACVY,SAAUA,UAKbE,MAAM,+BAEPL,EAAqBA,EAAmB1G,QAAQ,GAChD,EAAKgH,SAAS,CACbb,gBAAiBQ,EACjBN,cAAeK,IAGhB,IAAIO,EAAmBC,KAAKC,MAAMC,aAAaC,QAAQjB,IAEnDa,IACHA,EAAiBd,gBAAkBQ,EACnCM,EAAiBZ,cAAgBK,EACjCO,EAAiBd,gBAAkBQ,EACnCS,aAAaE,QAAQlB,EAAWc,KAAKK,UAAUN,M,EAIjDO,WAAa,SAACrI,GAAW,IAAD,EAC+B,EAAK4G,MAAnDM,EADe,EACfA,cAAeF,EADA,EACAA,gBAAiBC,EADjB,EACiBA,UAChC5E,EAAW,EAAKzC,MAAhByC,OACJiG,EAAgBlB,SAASF,GAE7B,IAAK7E,EAAOrC,GACX,OAAO4H,MAAM,+CACd,IAEML,EAAqBe,EAFHjG,EAAOrC,GAAOC,cAAcY,QAAQ,GACrBmG,EAAgBhH,GAAO0H,SAExDa,EAAsBvB,SACrBuB,EAAoBvI,GAC3B,EAAK6H,SAAS,CACbb,gBAAiBuB,EACjBrB,cAAeK,IAEhB,IAAIO,EAAmBC,KAAKC,MAAMC,aAAaC,QAAQjB,IAE9B,OAArBa,GAE4C,OAA5CA,EAAiBd,gBAAgBhH,KACpC8H,EAAiBZ,cAAgBK,SAC1BO,EAAiBd,gBAAgBhH,GACxCiI,aAAaE,QAAQlB,EAAWc,KAAKK,UAAUN,M,EAIjD/H,mBAAqB,SAACC,GAAW,IACxBqC,EAAW,EAAKzC,MAAhByC,OACA2E,EAAoB,EAAKJ,MAAzBI,gBAER,IAAK3E,EAAOrC,GAAQ,OAAO,KAE3B,IAAIwI,EAAanG,EAAOrC,GAAOC,cAAgB+G,EAAgBhH,GAAOI,MACtE,OAAIoI,GAAc,EACV,QACGA,EAAa,EAChB,MAEA,K,EAITC,MAAQ,WAAO,IACNxB,EAAc,EAAKL,MAAnBK,UACFC,EAAgB,IAChBF,EAAkB,GACxB,EAAKa,SAAS,CAAEX,gBAAeF,oBAC/B,IAAIlG,EAAO,CACVoG,cAAeA,EACfF,gBAAiBA,GAElBiB,aAAaE,QAAQlB,EAAWc,KAAKK,UAAUtH,K,EAEhD4H,kBAAoB,WAAO,IAClBxB,EAAkB,EAAKN,MAAvBM,cAEJyB,EAAc,OAGlB,GAAIV,aAAaC,QAAQS,GAAc,CACtC,IAAM7H,EAAOiH,KAAKC,MAAMC,aAAaC,QAAQS,IACvCC,EAA8B9H,EAAKkG,gBACnC6B,EAA4B/H,EAAKoG,cACvC,EAAKW,SAAS,CACbZ,UAAW0B,EACXzB,cAAe2B,EACf7B,gBAAiB4B,QAId,CACJ,IAAI9H,EAAO,CAAEoG,cAAeA,EAAeF,gBAAiB,IAC5DiB,aAAaE,QAAQQ,EAAaZ,KAAKK,UAAUtH,IACjD,EAAK+G,SAAS,CAAEX,gBAAeD,UAAW0B,M,EAG5CG,MAAQ,SAAC9I,GAAW,IACXqC,EAAW,EAAKzC,MAAhByC,OACA2E,EAAoB,EAAKJ,MAAzBI,gBACR,GACW,OAAVhH,GACkB,OAAlBqC,EAAOrC,IACoB,OAA3BgH,EAAgBhH,GAEhB,OAAO,KACR,IAGI+I,EAHErB,EAAWV,EAAgBhH,GAAO0H,SACpCsB,EAAYhC,EAAgBhH,GAAOI,MAGnC6I,EAAa,EAcjB,OARAA,GADAA,GAHAF,IAJmB1G,EAAOrC,GAAOC,cAIX+I,GAAahC,EAAgBhH,GAAO0H,UAAU7G,QACnE,KAEmB6G,EAAWsB,GAAc,KACrBnI,QAAQ,IACf,EACJ,UAAMkI,EAAN,aAAaE,EAAb,MACFA,EAAa,EACX,UAAMF,EAAN,cAAcE,EAAd,MAEG,K,uDAIP,IAAD,SACmC5I,KAAKuG,MAAxCI,EADA,EACAA,gBAAiBE,EADjB,EACiBA,cACjB7E,EAAWhC,KAAKT,MAAhByC,OACR,OACC,mCAGC,cAAC6G,EAAA,EAAKC,KAAN,CAAWtJ,UAAU,8BAArB,SACC,qBAAKA,UAAU,yBAAf,SACC,eAACuJ,EAAA,EAAD,WAEC,eAACC,EAAA,EAAD,WACC,cAACD,EAAA,EAAD,CAAKvJ,UAAU,6BAAf,SACC,qBAAKA,UAAU,mBAAf,SACC,6BAAKqH,QAGP,cAACkC,EAAA,EAAD,UACC,qBAAKvJ,UAAU,YAAf,SACC,eAACyJ,EAAA,EAAD,WACC,eAACA,EAAA,EAAKC,MAAN,WACC,cAACD,EAAA,EAAKE,MAAN,oBACA,cAACF,EAAA,EAAKG,QAAN,CACCC,GAAG,SACHC,QAAM,EACNC,SAAU,SAACC,GACV,EAAKhC,SAAS,CAAEd,cAAe8C,EAAEC,OAAO1J,SAJ1C,SAMEC,KAAKT,MAAMyC,QACXF,OAAOC,KAAK/B,KAAKT,MAAMyC,QAAQtB,KAAI,SAACD,GACnC,OAAO,iCAASA,YAIpB,eAACwI,EAAA,EAAKC,MAAN,WACC,cAACD,EAAA,EAAKE,MAAN,uBACA,cAACF,EAAA,EAAKG,QAAN,CACCM,UAAQ,EACRnH,KAAK,SACLgH,SAAU,SAACC,GACV,EAAKhC,SAAS,CAAEf,SAAU+C,EAAEC,OAAO1J,SAEpC4J,IAAK,EACLC,IAAK,QAGP,cAACC,EAAA,EAAD,CACCrK,UAAU,OACVa,QAAS,WACR,EAAK2G,aAHP,iCAYJ,cAACgC,EAAA,EAAD,CAAKc,GAAI,GAAT,SACC,eAACjB,EAAA,EAAKC,KAAN,CAAWtJ,UAAU,uBAArB,UACC,sBAAKA,UAAU,iCAAf,UACC,qBAAKA,UAAU,wBAAf,SACC,6CAED,qBAAKA,UAAU,wBAAf,SACC,cAACqK,EAAA,EAAD,CACCxJ,QAAS,WACR,EAAK+H,SAFP,wBAQDtG,OAAOC,KAAK4E,GAAiBzB,OAAS,EACtC,qBAAK1F,UAAU,2BAAf,SACC,eAACiC,EAAA,EAAD,CAAOsI,SAAO,EAACrI,UAAQ,EAACC,OAAK,EAA7B,UACC,uBAAOnC,UAAU,cAAjB,SACC,+BACC,sCACA,2CACA,4CACA,8CACA,qCACA,4BAGF,gCACEmH,GACA7E,OAAOC,KAAK4E,GAAiBjG,KAAI,SAACf,GACjC,OACC,+BACC,6BAAKA,IACL,6BACEgH,EACAA,EAAgBhH,GAAOI,MAEvB,cAACiK,EAAA,EAAD,CAAUC,QAAQ,OAAOC,MAAM,WAGjC,6BACElI,EAAOrC,GACPqC,EAAOrC,GAAOC,cAAcY,QAAQ,GAEpC,cAACwJ,EAAA,EAAD,CAAUC,QAAQ,OAAOC,MAAM,WAGjC,6BACEvD,EACAA,EAAgBhH,GAAO0H,SAEvB,cAAC2C,EAAA,EAAD,CAAUC,QAAQ,OAAOC,MAAM,WAGjC,oBACC1K,UAAW,EAAKE,mBAAmBC,GADpC,SAEEqC,EAAOrC,GACP,EAAK8I,MAAM9I,GAEX,cAACqK,EAAA,EAAD,CAAUC,QAAQ,OAAOC,MAAM,WAGjC,6BACC,cAACL,EAAA,EAAD,CACCxJ,QAAS,kBAAM,EAAK2H,WAAWrI,IADhC,iCAYR,oBAAIH,UAAU,MAAd,yD,GA3UgBuB,aAuVXoJ,cAAU7D,GCtVnB8D,EAAW,4BA2FFC,E,4MAxFX9D,MAAQ,CAEHvE,OAAQ,GACRH,kBAAcyI,EACdjE,iBAAiB,G,EAElBgC,kBAAoB,WAClB,EAAKkC,WAAa,IAAIC,UAAUJ,GAChC,EAAKG,WAAWE,UAAY,EAAKC,mBACjC,EAAKH,WAAWI,QAAU,WAAQ,EAAKnD,SAAS,CAACnB,iBAAiB,M,EAGpEqE,mBAAqB,SAACE,GACpB,EAAKrL,MAAMsL,cACX,IAAIC,EAASpD,KAAKC,MAAMiD,EAAMnK,MACzBsK,EAAuC,EAAtBC,EAAyB,EAE3CC,EAAenF,KAAKoF,MACpBC,EAAa,EAAK5E,MAAMvE,OAC5B8I,EAAOpK,KAAI,SAACf,GAGP,EAAK4G,MAAMvE,OAAOrC,EAAM,KAEzBwL,EAAWxL,EAAM,IAAIC,cAAgBwL,OAAOzL,EAAM,IAAMoL,IAAoBC,IAC5EG,EAAWxL,EAAM,IAAIC,cAAgBwL,OAAOzL,EAAM,IAClDwL,EAAWxL,EAAM,IAAIE,QAAQwL,KAAK,CAACxK,KAAMoK,EAAclL,MAAOqL,OAAOzL,EAAM,OAI3EwL,EAAWxL,EAAM,IAAM,CAAEC,cAAeD,EAAM,GAAIE,QAAS,CAAC,CAACgB,KAAMiF,KAAKoF,MAAOnL,MAAOqL,OAAOzL,EAAM,MAAOO,aAAa,MAG3H,EAAKsH,SAAS,CAACxF,OAAQmJ,EAAYtJ,aAAc,EAAKyJ,eAAeP,EAAiBC,M,EAGxFM,eAAiB,SAACC,EAAUC,GAC1B,GAAGD,IAAaC,EAChB,OAAOD,EAAWC,EAAa,KAAO,Q,EAGxClL,qBAAuB,SAACF,GACtB,IAAI+K,EAAa,EAAK5E,MAAMvE,OAE5BmJ,EAAW/K,GAAYF,aAAeiL,EAAW/K,GAAYF,YAC7D,EAAKsH,SAAS,CAAExF,OAAQmJ,K,EAG1B5J,UAAY,WACV,IAAI4J,EAAa,EAAK5E,MAAMvE,OAE5BF,OAAOC,KAAK,EAAKwE,MAAMvE,QAAQtB,KAAI,SAACN,EAAY6B,GAE9CkJ,EAAW/K,GAAYP,QAAU,CAACsL,EAAW/K,GAAYP,QAAQ4L,UAGnE,EAAKjE,SAAS,CAAExF,OAAQmJ,K,EAG1B3J,gBAAkB,WAChB,OAAOM,OAAOC,KAAK,EAAKwE,MAAMvE,QAAQkD,OAAS,G,uDAI/C,OACE,sBAAK1F,UAAU,YAAf,UACE,sBAAKA,UAAU,UAAf,UACE,cAAC,EAAD,CACEwC,OAAQhC,KAAKuG,MAAMvE,OACnB1B,qBAAsBN,KAAKM,qBAC3BiB,UAAWvB,KAAKuB,UAChBM,aAAc7B,KAAKuG,MAAM1E,aACzBL,gBAAiBxB,KAAKwB,kBAExB,cAAC,EAAD,CAAaQ,OAAQhC,KAAKuG,MAAMvE,YAElC,8BACE,cAAC,EAAD,CAAaR,gBAAiBxB,KAAKwB,gBAAiBQ,OAAQhC,KAAKuG,MAAMvE,WAEzE,sBAAKxC,UAAYQ,KAAKT,MAAMmM,YAAc,kBAAoB,QAA9D,UACE,qBAAKlM,UAAU,qBACb,cAAC,EAAD,CAAoB6G,gBAAiBrG,KAAKuG,MAAMF,4B,GAlFtCtF,aC+Bb4K,E,4MAlCbpF,MAAQ,CACNqF,UAAU,EACVF,aAAa,G,EAcfb,YAAc,WACZ,EAAKrD,SAAS,CAACkE,aAAa,K,gEANZG,EAAOC,GAEvBC,QAAQC,IAAIH,EAAOC,K,+BAQnB,OAAI9L,KAAKuG,MAAMqF,SACN,cAAC,EAAD,IAGJ,qBAAKpM,UAAU,WAAf,SACG,qBAAKA,UAAU,sBAAf,SACG,cAAC,EAAD,CAAeqL,YAAa7K,KAAK6K,YAAaoB,KAAMjM,KAAKT,MAAM0M,KAAMP,YAAa1L,KAAKuG,MAAMmF,sB,GA7BpF3K,a,mDCJXmL,G,OAAY,6BCsBVC,E,uKAlBD,IAAD,EACiDnM,KAAKT,MAApD6M,EADF,EACEA,UAAUC,EADZ,EACYA,WAAWC,EADvB,EACuBA,YAAYC,EADnC,EACmCA,aACxC,OAAe,OAAZH,GAA+B,OAAbC,GAAiC,OAAdC,GAAmC,OAAfC,EAChD,cAACvC,EAAA,EAAD,CAAUC,QAAQ,SAG9B,qCACA,qBAAKzK,UAAS,UAAK6M,GAAnB,SACA,+BAAOD,MAEN,qBAAK5M,UAAS,UAAK+M,GAAnB,SACC,+BAAOD,a,GAbKvL,aCOfyL,E,4MACHjG,MAAQ,CACJkG,YAAY,KACZC,aAAa,KACbC,QAAQ,M,EAGZC,e,sBAAiB,sBAAAC,EAAA,sEAEHC,IAAMC,IAAIb,GAAac,MAAK,SAACC,GAC/B,GAAmB,MAAfA,EAAIC,OACF,OAAQD,EAAIxM,KAAK0M,QAAQ,MAE7BC,OAAM,SAACC,GAAD,OAAStB,QAAQC,IAAIqB,MANxB,mF,EASjBC,YAAa,SAACb,GAAe,IAClBc,EAAuCd,EAAvCc,SAASC,EAA8Bf,EAA9Be,QAAQC,EAAsBhB,EAAtBgB,KAAKC,EAAiBjB,EAAjBiB,MAAWC,EAAMlB,EAAXmB,IAAKD,IACpChB,EAAQ,GACRD,EAAa,GAOjB,OANAC,EAAO,SAAaY,EACpBb,EAAY,MAAUc,EACtBd,EAAY,KAASe,EACrBf,EAAY,MAAUgB,EACtBhB,EAAY,IAAQiB,EACpB,EAAKnG,SAAS,CAACkF,eAAaC,YACrB,M,EAGXvE,MAAM,SAAC6D,GAEL,OAAGA,EAAK4B,eACUnG,KAAKC,MAAMC,aAAaC,QAAQoE,EAAK6B,cAEnDlG,aAAaE,QAAQmE,EAAK6B,WAAWpG,KAAKK,UAJrC,CAAC,cAAgB,IAAO,gBAAkB,MAKxCR,MAAM,oCAGXA,MAAM,kCAIHA,MAAM,iC,EAGpBc,kB,sBAAoB,4BAAAwE,EAAA,sEACE,EAAKD,iBADP,OACVnM,EADU,OAEd,EAAK6M,YAAY7M,GACjB,EAAK+G,SAAS,CAACiF,YAAYhM,IAHb,2C,uDAKP,IAAD,SACqBT,KAAKuG,MAA3BmG,EADC,EACDA,aAAaC,EADZ,EACYA,QACbV,EAAMjM,KAAKT,MAAMwO,MAAjB9B,KAEJ,OADHF,QAAQC,IAAIC,GAEL,cAAC+B,EAAA,EAAD,CAAWxO,UAAU,4BAArB,SACI,sBAAKA,UAAU,iCAAf,UAEA,qBAAKA,UAAU,wBAAf,SACKkN,EAAe,qBAAKuB,IAAG,UAAKvB,EAAawB,MAAMC,OAASC,IAAI,UAAa,cAACpE,EAAA,EAAD,CAAUC,QAAQ,SAASC,MAAO,IAAKmE,OAAQ,QAE7H,eAACxF,EAAA,EAAKC,KAAN,CAAWtJ,UAAU,4BAArB,UAEI,eAACuJ,EAAA,EAAD,CAAKvJ,UAAU,kDAAf,UACE,cAACwJ,EAAA,EAAD,CAAKsF,GAAI,EAAGxE,GAAI,GAAItK,UAAU,uCAA9B,SACKkN,EAAc,cAAC,EAAD,CAASN,UAAU,OAAOC,WAAW,6BAA6BC,YAAW,iBAAKI,QAAL,IAAKA,OAAL,EAAKA,EAAce,KAAKtM,MAAxB,oBAAkCuL,QAAlC,IAAkCA,OAAlC,EAAkCA,EAAce,KAAKc,MAArD,oBAA+D7B,QAA/D,IAA+DA,OAA/D,EAA+DA,EAAce,KAAKe,MAAQjC,aAAa,yBAA4B,cAACvC,EAAA,EAAD,CAAUC,QAAQ,OAAOC,MAAO,QAEnQ,cAAClB,EAAA,EAAD,CAAKsF,GAAI,EAAGxE,GAAI,GAAItK,UAAU,sCAA9B,SACKkN,EAAc,cAAC,EAAD,CAASN,UAAU,MAAMC,WAAW,4BAA4BC,YAAW,iBAAKI,QAAL,IAAKA,OAAL,EAAKA,EAAciB,KAAOpB,aAAa,wBAA0B,cAACvC,EAAA,EAAD,CAAUC,QAAQ,OAAOC,MAAO,QAE/L,cAAClB,EAAA,EAAD,CAAKsF,GAAI,EAAGxE,GAAI,GAAItK,UAAU,wCAA9B,SACKkN,EACC,cAAC,EAAD,CAASN,UAAU,QAAQC,WAAW,8BAA8BC,YAAW,iBAAKI,QAAL,IAAKA,OAAL,EAAKA,EAAcgB,OAASnB,aAAa,0BACvH,cAACvC,EAAA,EAAD,CAAUC,QAAQ,OAAOC,MAAO,WAIzC,eAACnB,EAAA,EAAD,CAAKvJ,UAAU,iDAAf,UACE,cAACwJ,EAAA,EAAD,CAAKsF,GAAI,EAAGxE,GAAI,GAAItK,UAAU,yCAA9B,SACGmN,EACC,cAAC,EAAD,CAASP,UAAU,SAASC,WAAW,+BAA+BC,YAAW,iBAAKK,QAAL,IAAKA,OAAL,EAAKA,EAASY,SAASkB,OAAOC,OAA9B,qBAA0C/B,QAA1C,IAA0CA,OAA1C,EAA0CA,EAASY,SAASkB,OAAOhB,MAAQlB,aAAa,2BACxK,cAACvC,EAAA,EAAD,CAAUC,QAAQ,OAAOC,MAAO,QAErC,cAAClB,EAAA,EAAD,CAAKsF,GAAI,EAAGxE,GAAI,GAAItK,UAAU,0CAA9B,SACGmN,EACC,cAAC,EAAD,CAASP,UAAU,OAAOC,WAAW,6BAA6BC,YAAW,iBAAKK,QAAL,IAAKA,OAAL,EAAKA,EAASY,SAASoB,MAAQpC,aAAa,yBACxH,cAACvC,EAAA,EAAD,CAAUC,QAAQ,OAAOC,MAAO,QAErC,eAAClB,EAAA,EAAD,CAAKsF,GAAI,EAAGxE,GAAI,GAAItK,UAAU,wCAA9B,cAAwEmN,EACpE,cAAC,EAAD,CAASP,UAAU,UAAUC,WAAW,gCAAgCC,YAAW,iBAAKK,QAAL,IAAKA,OAAL,EAAKA,EAASY,SAASqB,SAAWrC,aAAa,4BAC/H,cAACvC,EAAA,EAAD,CAAUC,QAAQ,OAAOC,MAAO,MAFvC,OAGA,cAAClB,EAAA,EAAD,CAAKsF,GAAI,EAAGxE,GAAI,GAAItK,UAAU,0CAA9B,SACGmN,EACC,cAAC,EAAD,CAASP,UAAU,SAASC,WAAW,+BAA+BC,YAAW,iBAAKK,QAAL,IAAKA,OAAL,EAAKA,EAASY,SAASsB,UAAYtC,aAAa,2BAChI,cAACvC,EAAA,EAAD,CAAUC,QAAQ,OAAOC,MAAO,WAGvC,cAACnB,EAAA,EAAD,CAAKvJ,UAAU,0BAAf,SACC,cAACqK,EAAA,EAAD,CAAQxJ,QAAS,kBAAI,EAAK+H,MAAM6D,IAAhC,yC,GAlGSlL,aA4GfoJ,cAAUqC,GCpHZsC,EAAa,YACbC,EAAW,iBCWTC,G,OCsBA7E,aA9BG,WAAO,IAAD,EAC2B8E,cAAvCC,EADY,EACZA,kBAAmBC,EADP,EACOA,gBAC3B,IAAGA,EAIC,OACI,cAACnB,EAAA,EAAD,CAAWxO,UAAU,kBAArB,SACI,cAACuJ,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAKc,GAAI,GAAItK,UAAU,oBAAvB,SACE,cAACqJ,EAAA,EAAKC,KAAN,CAAWtJ,UAAU,aAArB,SACI,sBAAKA,UAAU,oBAAf,UACI,qBAAKA,UAAU,2BAAf,SACI,qBAAK4O,IAAI,SAASC,OAAO,KAAKJ,IAAI,yFAElC,qBAAKzO,UAAU,4BAAf,UACG2P,GACC,cAACtF,EAAA,EAAD,CAASxJ,QAAS,WAAO6O,KAAsBjF,QAAQ,UAAvD,gCAd3BiF,O,MCRM,I,OFIM,WAAO,IAAD,EACWD,cAA5BG,EADiB,EACjBA,OACR,OAFyB,EACTD,iBAGb,cAACtF,EAAA,EAAD,CAAQI,QAAQ,SAAS5J,QAAS,WAAK+O,KAAvC,uBGCCC,G,uKAEarP,KAAKT,MAAMwO,MAApB9B,KACR,OACC,sBAAKzM,UAAU,yBAAf,UAEC,qBAAKA,UAAU,8BAAf,SAEC,mBAAG8P,KAAI,UAAKR,GAAiB9I,MAAO,CAAEuJ,eAAgB,QAAtD,oBAOD,sBAAK/P,UAAU,aAAf,UACC,qBAAKA,UAAU,oBAAf,SACC,mBAAG8P,KAAI,UAAKP,GAAZ,uBAED,qBAAKvP,UAAU,qBAAf,SACC,cAAC,EAAD,gB,GApBoBuB,aA4BXoJ,eAAUkF,IC3BnBG,I,8KAEJ,OACC,sBAAKhQ,UAAU,MAAf,UACC,qBAAKA,UAAU,mBAAf,SACC,cAAC,GAAD,MAED,eAAC,IAAD,WAYC,cAAC,IAAD,CAAOiQ,KAAMV,EAAaW,UAAWlD,IACrC,cAAC,IAAD,aACCiD,KAAMX,EACNY,UAAW/D,GACP3L,KAAKT,QACV,cAAC,IAAD,CAAUoQ,KAAK,IAAIC,GAAId,c,GAxBV/N,cA+BHoJ,eAAUqF,IC7BVK,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB/C,MAAK,YAAkD,IAA/CgD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,SCGdO,IAAShP,OACR,cAAC,KAAD,UAEC,cAAC,GAAD,MAGDiP,SAASC,eAAe,SAMzBV,M","file":"static/js/main.382e920c.chunk.js","sourcesContent":["import React from 'react'\n\nconst UnsafeScriptsWarning = props => {\n  return (\n    <div className='container stocks-loader'>\n      <div className='card-header'>\n        <div className='card-header-icon'>\n          <span className='loader'></span>\n        </div>\n        <div className='card-header-title'>\n          Loading...\n        </div>\n      </div>\n      <div className='card'>\n        <div className='card-content'>\n          You need to click on &nbsp;<code>Load Unsafe Scripts</code>&nbsp; to proceed.\n          <br /> Look for the &nbsp;<code>shield icon</code>&nbsp; on your browser's addreess bar.  &#8679;\n         \n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default UnsafeScriptsWarning;","import React from 'react'\nimport { Sparklines, SparklinesLine } from 'react-sparklines';\nimport TimeAgo from 'react-timeago'\n\nclass StockRow extends React.Component {\n\n  getStockValueColor = (stock) =>{\n    if(stock.current_value < stock.history.slice(-2)[0].value){\n      return 'red';\n    }\n    else if(stock.current_value > stock.history.slice(-2)[0].value){\n      return 'green';\n    }\n    else{\n      return null;\n    }\n  }\n\n  render() {\n    let history = this.props.stock_data.history;\n    return (\n      // .bind(this, this.props.stock_name)\n      <tr className={ this.props.stock_data.is_selected ? 'selected' : null } id={this.props.stock_name} onClick={()=>{this.props.toggleStockSelection(this.props.stock_name)}} >\n        <td>{this.props.stock_name.toUpperCase()}</td>\n        <td className={this.getStockValueColor(this.props.stock_data)}>\n          {this.props.stock_data.current_value.toFixed(2)}\n        </td>\n        <td>\n          <Sparklines data={history.map((history) => { return history.value})}>\n            <SparklinesLine color=\"blue\" />\n          </Sparklines>\n        </td>\n        <td className='updated_at'>\n          <TimeAgo date={ history.slice(-1)[0].time } />\n        </td>\n      </tr>\n    );\n  }\n}\n\nexport default StockRow;","import React from 'react'\n\nclass MarketTrendArrow extends React.Component {\n\n  getArrow = () => {\n    if(this.props.current_trend === 'up'){\n      return <span className='up-arrow'>&#8679;</span>\n    }\n    else if(this.props.current_trend === 'down'){\n      return <span className='down-arrow'>&#8681;</span>\n    }\n    else{\n      return '-';\n    }\n  }\n\n  render() {\n    return (\n      <span title='Market trend' className={\"icon market-trend\"}>\n        {this.getArrow()}\n      </span>\n    );\n  }\n}\n\nexport default MarketTrendArrow;","import React from 'react'\nimport { Detector } from \"react-detect-offline\";\nimport StockRow from './StockRow.jsx'\nimport MarketTrendArrow from './MarketTrendArrow.jsx'\nimport {Table} from 'react-bootstrap'\nimport './StocksList.css'\nconst StocksList = (props) => {\n  return (\n    <div className='card' id='stocks_list'>\n      <div className='card-header'>\n        <div className='card-header-title'>\n          Stocks\n          &nbsp;\n          <Detector\n            render={({ online }) => (\n              <span className={online ? \"tag is-success\" : \"tag is-danger\"}>\n                {online ? \"Live\" : \"Offline\"}\n              </span>\n            )}\n          />\n          &nbsp;\n          <button className='button is-small' onClick={props.resetData}>Clear history</button>\n        </div>\n      </div>\n      <div className='card-content px-2'>\n        { props.areStocksLoaded() ? <p className='is-size-7 has-text-info'>Click on a stock to select/unselect</p> : null }\n        <Table bordered hover responsive>\n          <thead className=\"thead-dark\">\n            <tr>\n              <th>Name</th>\n              <th>\n                Value\n                <MarketTrendArrow current_trend={props.market_trend} />\n              </th>\n              <th>History</th>\n              <th>Updated At</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Object.keys(props.stocks).map((stock_name, index) =>\n              {\n                let current_stock = props.stocks[stock_name];\n                return (\n                  <StockRow\n                    key={index} stock_name={stock_name}\n                    stock_data={current_stock}\n                    toggleStockSelection={props.toggleStockSelection}\n                  />\n                )\n              }\n            )}\n            { props.areStocksLoaded() ? null : <tr><td colSpan='4'>No stocks loaded yet!</td></tr> }\n          </tbody>\n        </Table>\n       </div>\n    </div>\n  );\n}\n\nexport default StocksList;\n","// configurations required for ChartJs\n\nexport const chartJsConfig = { \n    responsive: true,\n    scales: {\n      xAxes: [{\n        type: 'time',\n        distribution: 'linear',\n        ticks: {\n          source: 'auto'\n        },\n        time: {\n          displayFormats: {second: 'h:mm:ss a'},\n          unit: 'second'\n        },\n        scaleLabel: {\n          display: true,\n          labelString: 'Time'\n        }\n      }],\n      yAxes: [{\n        ticks: {\n          beginAtZero: true,\n          stepValue: 10,\n          steps: 10\n        },\n        scaleLabel: {\n          display: true,\n          labelString: 'Price ($)'\n        }\n      }]\n    },\n    pan: {\n      enabled: true,\n      mode: 'x'\n    },\n    zoom: {\n      enabled: true,\n      drag: false,\n      mode: 'x'\n    }\n  };\n  \n  // keep enough colors (should be as many as the number of stocks recieved)\n  // adding these manually to make sure the colors actually look good\n  export const chartColors = [\"rgb(244, 67, 54)\", \"rgb(76, 175, 80)\", \"rgb(63, 81, 181)\", \"rgb(255, 152, 0)\", \"rgb(33, 150, 243)\", \"rgb(139, 195, 74)\", \"rgb(255, 87, 34)\", \"rgb(121, 85, 72)\", \"rgb(233, 30, 99)\", \"rgb(205, 220, 57)\", \"rgb(156, 39, 176)\", \"rgb(255, 235, 59)\", \"rgb(158, 158, 158)\", \"rgb(103, 58, 183)\", \"rgb(0, 150, 136)\", \"rgb(255, 193, 7)\", \"rgb(96, 125, 139)\", \"rgb(33, 33, 33)\", \"rgb(169, 4, 4)\", \"rgb(1, 74, 64)\", \"rgb(179, 3, 72)\", \"rgb(84, 58, 68)\"];\n  \n  export const chartDataset = (stock_name, color, stock_values) => {\n    return {\n      label: stock_name.toUpperCase(),\n      fill: false,\n      lineTension: 0,\n      backgroundColor: color,\n      borderColor: color,\n      borderCapStyle: 'butt',\n      borderJoinStyle: 'miter',\n      pointBorderColor: color,\n      pointBackgroundColor: '#fff',\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: color,\n      pointHoverBorderColor: color,\n      pointHoverBorderWidth: 2,\n      pointRadius: 3,\n      pointHitRadius: 10,\n      data: stock_values\n    };\n  };\n  ","import React from 'react'\nimport {Line} from 'react-chartjs-2';\nimport { chartJsConfig, chartColors, chartDataset } from '../chartConfig.js'\n\nclass StocksGraph extends React.Component {\n\n  updateChart = () => {\n    let chart = this.refs.chart.chartInstance;\n// If stock object os null update chart data set as empty\n    if(Object.keys(this.props.stocks).length === 0)\n    {\n      chart.data.datasets = [];\n      return chart.update();\n    }\n    //Passing tock Info \n    Object.keys(this.props.stocks).map((stock_name, index) =>\n    {\n      let current_stock = this.props.stocks[stock_name];\n      let chart_dataset = chart.data.datasets.find((dataset) => {\n        return dataset.label === stock_name.toUpperCase()\n      });\n\n      if(current_stock.is_selected)\n      {\n        let current_stock = this.props.stocks[stock_name];\n        if(chart_dataset)\n        {\n          // only update the data, don't create a new dataset for the graph\n          chart_dataset.data = this.getStockValues(current_stock);\n        }\n        else\n        {\n          // create a new dataset for graph\n          if(current_stock)\n          {\n            chart.data.datasets = chart.data.datasets.concat(\n              [\n                chartDataset(stock_name, chartColors[index], this.getStockValues(current_stock))\n              ]\n            )\n          }\n        }\n      }\n      else\n      {\n        if(chart_dataset)\n        {\n          // remove the dataset from graph\n          chart.data.datasets.splice(chart.data.datasets.indexOf(chart_dataset), 1);\n        }\n      }\n      chart.update();\n    })\n  }\n\n  componentDidUpdate = () => {\n    this.updateChart();\n  }\n\n  // returns an array of objects, {t: timestamp, y: value}\n  getStockValues = (stock) =>{\n    return stock.history.map((history) => {\n      return {t: new Date(history.time), y: history.value};\n    })\n  }\n\n  // resetZoom = () => {\n  //   this.refs.chart.chartInstance.resetZoom();\n  // }\n\n  render() {\n    return (\n      <div className={'card column p-0'} style={{margin:'10px'}} >\n        <div className='card-header'>\n          <div className='card-header-title'>\n            Graph\n          </div>\n        </div>\n        <div className='card-content'>\n          <p className='is-size-7 has-text-info'>\n            {\n              this.refs.chart &&\n              this.refs.chart.chartInstance.data.datasets.length > 0 ? 'Scroll/pinch to zoom, drag to pan.' : 'Click on any stocks on your left to see graphs.'\n            }\n          </p>\n          <Line\n            data={{datasets: []}}\n            options={chartJsConfig}\n            ref='chart'\n          />\n        </div> \n      </div>\n    );\n  }\n}\n\nexport default StocksGraph;","import React from 'react'\n\nconst StocksLoaderStatus = props => {\n  if(props.connectionError) {\n    return (\n      <div className='is-medium'>\n        <span className='has-text-danger' >Server sent no data. Probably the market is closed at the moment. </span>\n        <br />(Come back later? :-))\n      </div>\n    );\n  } else {\n    return (\n      <div className='is-large is-success'>\n        <span className='loader'> &nbsp;</span>\n      </div>\n    );\n  }\n}\n\nexport default StocksLoaderStatus;","import React, { Component } from \"react\";\nimport { Card, Button, Table, Row, Col, Form } from \"react-bootstrap\";\nimport \"./ClientStock.css\";\nimport { withAuth0 } from \"@auth0/auth0-react\";\nimport Skeleton from \"@material-ui/lab/Skeleton\";\n\nclass ClientStock extends Component {\n\tstate = {\n\t\tshow: false,\n\t\tquantity: null,\n\t\tselectedStock: null,\n\t\tpurchasedStocks: {},\n\t\tlocalUser: null,\n\t\tdefaultAmount: 100000,\n\t};\n\tvalidation = () => {\n\t\tlet { quantity, selectedStock } = this.state;\n\t\tquantity = parseInt(quantity);\n\t\tif (typeof quantity === \"number\" && quantity >= 1 && quantity < 11) {\n\t\t\tif (typeof selectedStock === \"string\" && selectedStock !== null)\n\t\t\t\treturn true;\n\t\t\telse return false;\n\t\t} else return false;\n\t};\n\tbuyStocks = () => {\n\t\tlet {\n\t\t\tquantity,\n\t\t\tselectedStock,\n\t\t\tpurchasedStocks,\n\t\t\tdefaultAmount,\n\t\t\tlocalUser,\n\t\t} = this.state;\n\t\tlet [flag, tempdeafaultAmount, tempPurchasedStocks] = [\n\t\t\t0,\n\t\t\tdefaultAmount,\n\t\t\tpurchasedStocks,\n\t\t];\n\t\tconst valid = this.validation();\n\t\tquantity = parseInt(quantity);\n\t\tif (valid) {\n\t\t\tlet [myShares, buyingPrice] = [0, 0];\n\t\t\tmyShares += quantity;\n\t\t\t// if the user stock has no holding\n\t\t\tif (Object.keys(purchasedStocks).length === 0) {\n\t\t\t\tbuyingPrice = this.props.stocks[selectedStock].current_value.toFixed(2);\n\t\t\t\ttempdeafaultAmount = tempdeafaultAmount - buyingPrice * myShares;\n\t\t\t\ttempPurchasedStocks[selectedStock] = {\n\t\t\t\t\tvalue: buyingPrice,\n\t\t\t\t\tquantity: quantity,\n\t\t\t\t\tmyShares: myShares,\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\t//checks the buying stock already exists in the user portfolio\n\t\t\t\tObject.keys(purchasedStocks).map((stock) => {\n\t\t\t\t\tbuyingPrice = this.props.stocks[selectedStock].current_value.toFixed(\n\t\t\t\t\t\t2,\n\t\t\t\t\t);\n\t\t\t\t\tif (stock === selectedStock) {\n\t\t\t\t\t\tmyShares = purchasedStocks[stock].myShares + quantity;\n\t\t\t\t\t\ttempdeafaultAmount = tempdeafaultAmount - buyingPrice * myShares;\n\t\t\t\t\t\ttempPurchasedStocks[selectedStock] = {\n\t\t\t\t\t\t\tvalue: buyingPrice,\n\t\t\t\t\t\t\tquantity: quantity,\n\t\t\t\t\t\t\tmyShares: myShares,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tflag = 1;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t//To add the new stock in the existing list\n\t\t\t\tif (!flag) {\n\t\t\t\t\ttempdeafaultAmount = tempdeafaultAmount - buyingPrice * myShares;\n\t\t\t\t\ttempPurchasedStocks[selectedStock] = {\n\t\t\t\t\t\tvalue: buyingPrice,\n\t\t\t\t\t\tquantity: quantity,\n\t\t\t\t\t\tmyShares: myShares,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\talert(\"Please upload data properly\");\n\t\t}\n\t\ttempdeafaultAmount = tempdeafaultAmount.toFixed(2);\n\t\tthis.setState({\n\t\t\tpurchasedStocks: tempPurchasedStocks,\n\t\t\tdefaultAmount: tempdeafaultAmount,\n\t\t});\n\t\t// Getting the user from the local storage\n\t\tlet localStorageData = JSON.parse(localStorage.getItem(localUser));\n\t\t//if user exists updating the localstorage amount and stocks list\n\t\tif (localStorageData) {\n\t\t\tlocalStorageData.purchasedStocks = tempPurchasedStocks;\n\t\t\tlocalStorageData.defaultAmount = tempdeafaultAmount;\n\t\t\tlocalStorageData.purchasedStocks = tempPurchasedStocks;\n\t\t\tlocalStorage.setItem(localUser, JSON.stringify(localStorageData));\n\t\t}\n\t};\n\n\tsellStocks = (stock) => {\n\t\tconst { defaultAmount, purchasedStocks, localUser } = this.state;\n\t\tconst { stocks } = this.props;\n\t\tlet currentAmount = parseInt(defaultAmount);\n\t\t//  Waiting for stocks to load to the front end before selling them\n\t\tif (!stocks[stock])\n\t\t\treturn alert(\"Please wait for the Data to load. Thank you\");\n\t\tlet currentStockValue = stocks[stock].current_value.toFixed(2);\n\t\tconst sellAmount = currentStockValue * purchasedStocks[stock].myShares;\n\t\tconst tempdeafaultAmount = currentAmount + sellAmount;\n\t\tconst temppurchasedStocks = purchasedStocks;\n\t\tdelete temppurchasedStocks[stock];\n\t\tthis.setState({\n\t\t\tpurchasedStocks: temppurchasedStocks,\n\t\t\tdefaultAmount: tempdeafaultAmount,\n\t\t});\n\t\tlet localStorageData = JSON.parse(localStorage.getItem(localUser));\n\t\t//  If user is null return null\n\t\tif (localStorageData === null) return;\n\t\t//if user exists updating the localstorage amount and stocks list\n\t\tif (localStorageData.purchasedStocks[stock] !== null) {\n\t\t\tlocalStorageData.defaultAmount = tempdeafaultAmount;\n\t\t\tdelete localStorageData.purchasedStocks[stock];\n\t\t\tlocalStorage.setItem(localUser, JSON.stringify(localStorageData));\n\t\t}\n\t};\n\t// Get the stock P/L Color ['red' or 'green']\n\tgetStockValueColor = (stock) => {\n\t\tconst { stocks } = this.props;\n\t\tconst { purchasedStocks } = this.state;\n\t\t// Checks the stocks props if it has data in it\n\t\tif (!stocks[stock]) return null;\n\t\t// Finds the difference between the cost price and current stock price\n\t\tlet difference = stocks[stock].current_value - purchasedStocks[stock].value;\n\t\tif (difference >= 0) {\n\t\t\treturn \"green\";\n\t\t} else if (difference < 0) {\n\t\t\treturn \"red\";\n\t\t} else {\n\t\t\treturn \"-\";\n\t\t}\n\t};\n\t// Reset the user portfolio to default 100k\n\treset = () => {\n\t\tconst { localUser } = this.state;\n\t\tconst defaultAmount = 100000;\n\t\tconst purchasedStocks = {};\n\t\tthis.setState({ defaultAmount, purchasedStocks });\n\t\tlet data = {\n\t\t\tdefaultAmount: defaultAmount,\n\t\t\tpurchasedStocks: purchasedStocks,\n\t\t};\n\t\tlocalStorage.setItem(localUser, JSON.stringify(data));\n\t};\n\tcomponentDidMount = () => {\n\t\tconst { defaultAmount } = this.state;\n\t\t// Getting current user from the Auth0\n\t\tlet currentUser = \"Teja\";\n\t\t// this.props.auth0.user.given_name;\n\t\t// Checks whether the current user record already exists in the local Storage? If yes getting the records\n\t\tif (localStorage.getItem(currentUser)) {\n\t\t\tconst data = JSON.parse(localStorage.getItem(currentUser));\n\t\t\tconst localStoragePurchasedStocks = data.purchasedStocks;\n\t\t\tconst localStorageDefaultAmount = data.defaultAmount;\n\t\t\tthis.setState({\n\t\t\t\tlocalUser: currentUser,\n\t\t\t\tdefaultAmount: localStorageDefaultAmount,\n\t\t\t\tpurchasedStocks: localStoragePurchasedStocks,\n\t\t\t});\n\t\t}\n\t\t//  If the user is new? creating the record for the user with the current amount\n\t\telse {\n\t\t\tlet data = { defaultAmount: defaultAmount, purchasedStocks: {} };\n\t\t\tlocalStorage.setItem(currentUser, JSON.stringify(data));\n\t\t\tthis.setState({ defaultAmount, localUser: currentUser });\n\t\t}\n\t};\n\tgetPL = (stock) => {\n\t\tconst { stocks } = this.props;\n\t\tconst { purchasedStocks } = this.state;\n\t\tif (\n\t\t\tstock === null ||\n\t\t\tstocks[stock] === null ||\n\t\t\tpurchasedStocks[stock] === null\n\t\t)\n\t\t\treturn null;\n\t\tconst myShares = purchasedStocks[stock].myShares;\n\t\tlet costPrice = purchasedStocks[stock].value;\n\t\tlet sellingPrice = stocks[stock].current_value;\n\t\tlet pl = 0;\n\t\tlet percentage = 0;\n\t\tlet resultString;\n\t\tpl = ((sellingPrice - costPrice) * purchasedStocks[stock].myShares).toFixed(\n\t\t\t2,\n\t\t);\n\t\tpercentage = (pl / (myShares * costPrice)) * 100;\n\t\tpercentage = percentage.toFixed(2);\n\t\tif (percentage < 0) {\n\t\t\tresultString = `${pl} (${percentage}%)`;\n\t\t} else if (percentage > 0) {\n\t\t\tresultString = `${pl} (+${percentage}%)`;\n\t\t} else {\n\t\t\tresultString = \"0\";\n\t\t}\n\t\treturn resultString;\n\t};\n\trender() {\n\t\tconst { purchasedStocks, defaultAmount } = this.state;\n\t\tconst { stocks } = this.props;\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{/* Checks if the stocks are loaded */}\n\n\t\t\t\t<Card.Body className=\"client-stock-main-conatiner\">\n\t\t\t\t\t<div className=\"client-stock-container\">\n\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t{/* Stock Form buying*/}\n\t\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t\t<Row className=\"client-stock-container-row\">\n\t\t\t\t\t\t\t\t\t<div className=\"add-stock-amount\">\n\t\t\t\t\t\t\t\t\t\t<h1>{defaultAmount}</h1>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t<div className=\"container\">\n\t\t\t\t\t\t\t\t\t\t<Form>\n\t\t\t\t\t\t\t\t\t\t\t<Form.Group>\n\t\t\t\t\t\t\t\t\t\t\t\t<Form.Label>Stock</Form.Label>\n\t\t\t\t\t\t\t\t\t\t\t\t<Form.Control\n\t\t\t\t\t\t\t\t\t\t\t\t\tas=\"select\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tcustom\n\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.setState({ selectedStock: e.target.value });\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{this.props.stocks &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tObject.keys(this.props.stocks).map((data) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn <option>{data}</option>;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t\t\t\t</Form.Control>\n\t\t\t\t\t\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t\t\t\t\t\t\t<Form.Group>\n\t\t\t\t\t\t\t\t\t\t\t\t<Form.Label>Quantity</Form.Label>\n\t\t\t\t\t\t\t\t\t\t\t\t<Form.Control\n\t\t\t\t\t\t\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.setState({ quantity: e.target.value });\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\tmin={0}\n\t\t\t\t\t\t\t\t\t\t\t\t\tmax={10}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"mx-3\"\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.buyStocks();\n\t\t\t\t\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t\t\t\t\tBuy stock\n\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t</Form>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t{/* My Stock Listing */}\n\t\t\t\t\t\t\t<Col xs={12}>\n\t\t\t\t\t\t\t\t<Card.Body className=\"client-stock-holding\">\n\t\t\t\t\t\t\t\t\t<div className=\"client-stock-holding-container\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"client-stock-holdings\">\n\t\t\t\t\t\t\t\t\t\t\t<h1>My Stocks</h1>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"client-holdings-reset\">\n\t\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.reset();\n\t\t\t\t\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t\t\t\t\tReset\n\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t{Object.keys(purchasedStocks).length > 0 ? (\n\t\t\t\t\t\t\t\t\t\t<div className=\"stocks-holding-container\">\n\t\t\t\t\t\t\t\t\t\t\t<Table striped bordered hover>\n\t\t\t\t\t\t\t\t\t\t\t\t<thead className=\"thead-light\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<th>Name</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<th>Buy value</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<th>Live Value</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<th>Shares owned</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<th>P/L</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<th></th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{purchasedStocks &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tObject.keys(purchasedStocks).map((stock) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{stock}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{purchasedStocks ? (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpurchasedStocks[stock].value\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Skeleton variant=\"rect\" width=\"50px\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{stocks[stock] ? (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstocks[stock].current_value.toFixed(2)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Skeleton variant=\"rect\" width=\"50px\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{purchasedStocks ? (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpurchasedStocks[stock].myShares\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Skeleton variant=\"rect\" width=\"50px\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={this.getStockValueColor(stock)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{stocks[stock] ? (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.getPL(stock)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Skeleton variant=\"rect\" width=\"50px\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => this.sellStocks(stock)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsell\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t\t\t\t\t</Table>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<h2 className=\"p-3\">No Stocks in your account</h2>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t</div>\n\t\t\t\t</Card.Body>\n\t\t\t</>\n\t\t);\n\t}\n}\n\nexport default withAuth0(ClientStock);\n","import React,{Component} from 'react'\nimport * as bulma from \"reactbulma\";\nimport StocksList from \"./StocksList.jsx\";\nimport StocksGraph from \"./StocksGraph.jsx\";\nimport StocksLoaderStatus from \"./StocksLoaderStatus.jsx\";\nimport ClientStock from './clientStocks/ClientStock.jsx';\n\nconst stocksUrl ='ws://stocks.mnet.website/';\n\nclass MainDashboard extends Component {\n    state = {\n        // stocks = {name: {current_value: 12, history: [{time: '2131', value: 45}, ...], is_selected: false}, ...}\n         stocks: {},\n         market_trend: undefined, // 'up' or 'down'\n         connectionError: false,\n        }\n        componentDidMount = () => {\n          this.connection = new WebSocket(stocksUrl);\n          this.connection.onmessage = this.saveNewStockValues;\n          this.connection.onclose = () => { this.setState({connectionError: true})}\n        }\n      \n        saveNewStockValues = (event) => {\n          this.props.hideSpinner();\n          let result = JSON.parse(event.data);\n          let [up_values_count, down_values_count] = [0, 0];\n          // time stored in histories should be consisitent across stocks(better for graphs)\n          let current_time = Date.now();\n          let new_stocks = this.state.stocks\n          result.map((stock) =>\n          {\n            // stock = ['name', 'value']\n            if(this.state.stocks[stock[0]])\n            {\n              new_stocks[stock[0]].current_value > Number(stock[1]) ? up_values_count++ : down_values_count++;\n              new_stocks[stock[0]].current_value = Number(stock[1])\n              new_stocks[stock[0]].history.push({time: current_time, value: Number(stock[1])})\n            }\n            else\n            {\n              new_stocks[stock[0]] = { current_value: stock[1], history: [{time: Date.now(), value: Number(stock[1])}], is_selected: false }\n            }\n          });\n          this.setState({stocks: new_stocks, market_trend: this.newMarketTrend(up_values_count, down_values_count)})\n        }\n        // it's about the values that just came in, and not all the stocks\n        newMarketTrend = (up_count, down_count) => {\n          if(up_count === down_count) return undefined;\n          return up_count > down_count ? 'up' : 'down'\n        }\n      \n        toggleStockSelection = (stock_name) => {\n          let new_stocks = this.state.stocks;\n          //change the reset stock to true or false based on teh sleected stock\n          new_stocks[stock_name].is_selected = !new_stocks[stock_name].is_selected\n          this.setState({ stocks: new_stocks })\n        }\n      // reset\n        resetData = () => {\n          let new_stocks = this.state.stocks;\n          // resetting the history value\n          Object.keys(this.state.stocks).map((stock_name, index) =>\n          {\n            new_stocks[stock_name].history = [new_stocks[stock_name].history.pop()];\n          });\n       \n          this.setState({ stocks: new_stocks });\n        }\n        // Checks if stocks are loaded or not\n        areStocksLoaded = () => {\n          return Object.keys(this.state.stocks).length > 0;\n        }\n      \n        render() {\n          return (\n            <div className='container'>\n              <div className='columns'>\n                <StocksList\n                  stocks={this.state.stocks}\n                  toggleStockSelection={this.toggleStockSelection}\n                  resetData={this.resetData}\n                  market_trend={this.state.market_trend}\n                  areStocksLoaded={this.areStocksLoaded}\n                />\n                <StocksGraph stocks={this.state.stocks} />\n              </div>\n              <div>\n                <ClientStock areStocksLoaded={this.areStocksLoaded} stocks={this.state.stocks}/>\n              </div>\n              <div className={ this.props.showSpinner ? 'modal is-active' : 'modal' }>\n                <div className=\"modal-background\"></div>\n                  <StocksLoaderStatus connectionError={this.state.connectionError} />\n                </div>\n            </div>\n          );\n        }\n}\n \nexport default MainDashboard;","import React, { Component } from 'react';\nimport './Dashboard.css';\nimport UnsafeScriptsWarning from \"./UnsafeScriptsWarning\";\nimport MainDashboard from './MainDashboard';\nclass Dashboard extends Component {\n\n  state = {\n    hasError: false,\n    showSpinner: true\n  }\n\n  // static getDerivedStateFromError(error) {\n  //   // Update state so the next render will show the fallback UI.\n  //   console.log('some error has occured');\n  //   return { hasError: true };\n  // }\n\n  componentDidCatch(error, info) {\n    // You can also log the error to an error reporting service\n    console.log(error, info);\n  }\n\n  hideSpinner = () => {\n    this.setState({showSpinner: false});\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <UnsafeScriptsWarning />;\n    }\n    return (\n         <div className=\"app-body\">\n            <div className=\"main-body-container\">\n               <MainDashboard hideSpinner={this.hideSpinner} user={this.props.user} showSpinner={this.state.showSpinner} />\n            </div>\n          </div>\n    );\n  }\n}\n\nexport default Dashboard;\n","export const getUserData='https://randomuser.me/api'","import React, { Component } from 'react';\nimport Skeleton from '@material-ui/lab/Skeleton';\nclass InfoBox extends Component {\n   \n    render() { \n        const {labelText,labelClass,contentData,contentClass}=this.props;\n        if(labelText===null||labelClass===null||contentData===null||contentClass===null){\n            return (<Skeleton variant=\"rect\"  />)\n        }\n        return (  \n        <>\n        <div className={`${labelClass}`}>\n        <span>{labelText}</span>\n        </div>\n         <div className={`${contentClass}`}>\n          <span>{contentData}</span>\n         </div>\n         </> \n         );\n    }\n}\n \nexport default InfoBox;","import * as React from 'react';\nimport { Component } from 'react';\nimport axios from 'axios';\nimport { withAuth0 } from '@auth0/auth0-react';\nimport { Button, Card, Col, Container, Row } from 'react-bootstrap';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport './AccountSummary.css';\nimport { getUserData } from '../API';\nimport InfoBox from './common/InfoBox';\n class AccountSummary extends Component{\n    state = { \n        accountData:null,\n        personalInfo:null,\n        address:null,\n      }\n\n    getDataFromAPI = async () => {\n       return (\n            await axios.get(getUserData).then((res) => {\n\t\t\t            \tif (res.status === 200) {\n                      return (res.data.results[0])\n\t\t\t            \t}\n\t            \t\t}).catch((err) => console.log(err))\n        ) };\n\t\t\n    getUserInfo= (accountData)=>{\n        const {location,picture,name,phone,dob:{age}}=accountData;\n        let address={};\n        let personalInfo={};\n        address['location']=location;\n        personalInfo['image']=picture;\n        personalInfo['name']=name;\n        personalInfo['phone']=phone;\n        personalInfo['age']=age;\n        this.setState({personalInfo,address});\n        return null;\n        \n    }\n    reset=(user)=>{\n      let data={'defaultAmount':100000,'purchasedStocks':{}};\n      if(user.email_verified){\n          const getUser=JSON.parse(localStorage.getItem(user.given_name));\n          if(getUser){\n          localStorage.setItem(user.given_name,JSON.stringify(data));\n          return alert('Sucessfully reset the user');\n          }\n          else{\n            alert('User doesnt exists on out DB=>');\n          }\n      }\n      else{\n        return alert('User doesnt exists on out DB');\n    }\n    }\n\tcomponentDidMount = async () => {\n       let data= await this.getDataFromAPI();\n       this.getUserInfo(data);\n       this.setState({accountData:data})\n\t};\n    render() { \n     const {personalInfo,address}=this.state;\n     const {user}=this.props.auth0;\n     console.log(user);\n        return ( \n            <Container className='account-summary-container'>\n                <div className=\"account-summary-main-container\">\n                  {/* Random User Image from the API*/}\n                <div className=\"account-summary-image\">\n                    {personalInfo ?(<img src={`${personalInfo.image.large}`} alt=\"image\"/>) :(<Skeleton variant=\"circle\" width={200} height={200} />)}\n                </div>\n                <Card.Body className=\"account-summary-card-body\">\n                  {/* User personal Info */}\n                    <Row className=\"account-summary-personal-information-conatainer\">\n                      <Col lg={4} xs={12} className=\"account-summary-name-information-row\">\n                          {personalInfo?(<InfoBox labelText='NAME' labelClass='account-summary-name-label' contentData={`${personalInfo?.name.title}. ${personalInfo?.name.first}  ${personalInfo?.name.last}`} contentClass='account-summary-name'/> ):(<Skeleton variant=\"rect\" width={200}/>)} \n                      </Col>\n                      <Col lg={4} xs={12} className=\"account-summary-age-information-row\">\n                          {personalInfo?(<InfoBox labelText='AGE' labelClass='account-summary-age-label' contentData={`${personalInfo?.age}`} contentClass='account-summary-age'/>):(<Skeleton variant=\"rect\" width={200}/>)} \n                      </Col>\n                      <Col lg={4} xs={12} className=\"account-summary-phone-information-row\">\n                          {personalInfo?(\n                          ( <InfoBox labelText='PHONE' labelClass='account-summary-phone-label' contentData={`${personalInfo?.phone}`} contentClass='account-summary-phone'/>)\n                          ):(<Skeleton variant=\"rect\" width={200}/>)} \n                      </Col>\n                    </Row>\n                    {/* User Address Info */}\n                    <Row className=\"account-summary-address-information-conatainer\">\n                      <Col lg={4} xs={12} className=\"account-summary-street-information-row\">\n                        {address?(\n                          <InfoBox labelText='STREET' labelClass='account-summary-street-label' contentData={`${address?.location.street.number}   ${address?.location.street.name}`} contentClass='account-summary-street'/>\n                        ):(<Skeleton variant=\"rect\" width={200}/>)}\n                      </Col>\n                      <Col lg={4} xs={12} className=\"account-summary-country-information-row\">\n                        {address?(\n                          <InfoBox labelText='CITY' labelClass='account-summary-city-label' contentData={`${address?.location.city}`} contentClass='account-summary-city'/>\n                        ):(<Skeleton variant=\"rect\" width={200}/>)}\n                      </Col>\n                      <Col lg={4} xs={12} className=\"account-summary-state-information-row\"> {address?(\n                          <InfoBox labelText='Country' labelClass='account-summary-country-label' contentData={`${address?.location.country}`} contentClass='account-summary-country'/>\n                          ):(<Skeleton variant=\"rect\" width={200}/>)} </Col>\n                      <Col lg={4} xs={12} className=\"account-summary-country-information-row\">\n                        {address?(\n                          <InfoBox labelText='POSTAL' labelClass='account-summary-postal-label' contentData={`${address?.location.postcode}`} contentClass='account-summary-postal'/>\n                        ):(<Skeleton variant=\"rect\" width={200}/>)}\n                      </Col>\n                    </Row>\n                    <Row className=\"account-summary-signout\">\n                     <Button onClick={()=>this.reset(user)}>Reset Account</Button>\n                    </Row>\n                </Card.Body>\n                </div>\n          \n            </Container>\n        );\n    }\n}\n \nexport default withAuth0(AccountSummary);","// export const APPLICATION_NAME = \"/trade\";\nexport const DASHBOARD_URL = `dashboard`;\nexport const ACCOUNT_URL = `accountsummary`;\n","import React from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { Button} from 'react-bootstrap';\n\nconst LogoutButton = () => {\n  const { logout, isAuthenticated } = useAuth0();\n  return (\n    isAuthenticated && (\n     <Button variant='danger' onClick={()=>{logout()}}>SignOut</Button>  \n    )\n  )\n}\n\nexport default LogoutButton","import React from 'react'\nimport { withAuth0,useAuth0 } from '@auth0/auth0-react';\nimport {Button} from 'react-bootstrap';\nimport {Card,Row,Col,Container} from 'react-bootstrap';\nimport './loginForm.css'\nconst LoginForm = () => {\n    const { loginWithRedirect, isAuthenticated } = useAuth0();\n    if(isAuthenticated){\n         loginWithRedirect()\n    }\n    else{\n        return ( \n            <Container className='login-container'>\n                <Row>\n                  <Col xs={12} className='login-body-column'>\n                    <Card.Body className='login-body'>\n                        <div className=\"homepage_nav-body\">\n                            <div className=\"homepage_image-container\">\n                                <img alt=\"Google\" height=\"92\" src=\"https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png\"/>\n                                </div>\n                                <div className=\"homepage_nav-search-input\">\n                                { !isAuthenticated && (\n                                    <Button  onClick={() => {loginWithRedirect()}} variant='primary'>Login</Button>\n                                 )}\n                            </div> \n                        </div>\n                    </Card.Body>\n                   </Col>\n                </Row>\n            </Container>\n         );\n      }\n    }\n\n \nexport default withAuth0(LoginForm);\n","export default __webpack_public_path__ + \"static/media/loading.330b7d99.svg\";","import React, { Component } from \"react\";\nimport \"./LandingPage.css\";\nimport LogoutButton from \"./LogoutButton\";\nimport {\n\tAPPLICATION_NAM,\n\tDASHBOARD_URL,\n\tACCOUNT_URL,\n} from \"../DashboardConstants.jsx\";\nimport { withAuth0 } from \"@auth0/auth0-react\";\nclass LandingPage extends Component {\n\trender() {\n\t\tconst { user } = this.props.auth0;\n\t\treturn (\n\t\t\t<div className=\"main-conatianer-header\">\n\t\t\t\t{/* Account Logo */}\n\t\t\t\t<div className=\"main-conatianer-header-logo\">\n\t\t\t\t\t{/* {user ?  */}\n\t\t\t\t\t<a href={`${DASHBOARD_URL}`} style={{ textDecoration: \"none\" }}>\n\t\t\t\t\t\tlogo\n\t\t\t\t\t</a>\n\t\t\t\t\t{/* : \"logo\"} */}\n\t\t\t\t</div>\n\t\t\t\t{/* icons */}\n\t\t\t\t{/* {user && ( */}\n\t\t\t\t<div className=\"menu-icons\">\n\t\t\t\t\t<div className=\"menu-icons-anchor\">\n\t\t\t\t\t\t<a href={`${ACCOUNT_URL}`}>Account</a>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"menu-icons-signout\">\n\t\t\t\t\t\t<LogoutButton />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t{/* )} */}\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default withAuth0(LandingPage);\n","import React, { Component } from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport { withAuth0 } from \"@auth0/auth0-react\";\nimport Dashboard from \"./components/Dashboard\";\nimport AccountSummary from \"./components/AccountSummary\";\nimport { ACCOUNT_URL, DASHBOARD_URL } from \"./DashboardConstants\";\nimport LoginForm from \"./auth/loginForm\";\nimport PrivateRoute from \"./private-route\";\nimport LandingPage from \"./components/LandingPage\";\nimport \"./App.css\";\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<div className=\"header-container\">\n\t\t\t\t\t<LandingPage />\n\t\t\t\t</div>\n\t\t\t\t<Switch>\n\t\t\t\t\t{/* <Route\n\t\t\t\t\t\texact\n\t\t\t\t\t\tpath=\"/login\"\n\t\t\t\t\t\trender={(props) => <LoginForm {...props} />}></Route> */}\n\t\t\t\t\t{/* <PrivateRoute\n\t\t\t\t\t\tpath={`${ACCOUNT_URL}`}\n\t\t\t\t\t\tcomponent={AccountSummary}></PrivateRoute>\n\t\t\t\t\t<PrivateRoute\n\t\t\t\t\t\tpath={`${DASHBOARD_URL}`}\n\t\t\t\t\t\tcomponent={Dashboard}\n\t\t\t\t\t\t{...this.props}></PrivateRoute> */}\n\t\t\t\t\t<Route path={ACCOUNT_URL} component={AccountSummary}></Route>\n\t\t\t\t\t<Route\n\t\t\t\t\t\tpath={DASHBOARD_URL}\n\t\t\t\t\t\tcomponent={Dashboard}\n\t\t\t\t\t\t{...this.props}></Route>\n\t\t\t\t\t<Redirect from=\"/\" to={DASHBOARD_URL} />\n\t\t\t\t</Switch>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default withAuth0(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Auth0Provider } from \"@auth0/auth0-react\";\nconst domain = \"dev-gslwvf8o.us.auth0.com\";\nconst clientId = \"6pXEng5Rr5b2HzylZEtO7PAay9kcn2BC\";\n\nReactDOM.render(\n\t<BrowserRouter>\n\t\t{/* <Auth0Provider domain={domain} clientId={clientId} redirectUri='http://localhost:3001/trading/dashboard'> */}\n\t\t<App />\n\t\t{/* </Auth0Provider> */}\n\t</BrowserRouter>,\n\tdocument.getElementById(\"root\"),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}