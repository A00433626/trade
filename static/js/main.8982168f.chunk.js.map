{"version":3,"sources":["components/UnsafeScriptsWarning.jsx","components/StockRow.jsx","components/MarketTrendArrow.jsx","components/StocksList.jsx","chartConfig.js","components/StocksGraph.jsx","components/StocksLoaderStatus.jsx","components/clientStocks/ClientStock.jsx","components/MainDashboard.jsx","components/Dashboard.jsx","API.js","components/common/InfoBox.jsx","components/AccountSummary.jsx","DashboardConstants.jsx","auth/loginForm.jsx","private-route.js","assets/loading.svg","components/LogoutButton.jsx","components/LandingPage.jsx","App.js","reportWebVitals.js","index.js"],"names":["UnsafeScriptsWarning","props","className","StockRow","getStockValueColor","stock","current_value","history","slice","value","this","stock_data","is_selected","id","stock_name","onClick","toggleStockSelection","bind","toUpperCase","toFixed","data","map","color","date","time","React","Component","MarketTrendArrow","getArrow","current_trend","title","StocksList","render","online","resetData","areStocksLoaded","market_trend","Object","keys","stocks","index","current_stock","colSpan","chartJsConfig","responsive","scales","xAxes","type","distribution","ticks","source","displayFormats","second","unit","scaleLabel","display","labelString","yAxes","beginAtZero","stepValue","steps","pan","enabled","mode","zoom","drag","chartColors","chartDataset","stock_values","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","StocksGraph","updateChart","chart","refs","chartInstance","length","datasets","update","chart_dataset","find","dataset","getStockValues","concat","splice","indexOf","componentDidUpdate","t","Date","y","style","margin","options","ref","StocksLoaderStatus","connectionError","ClientStock","state","show","quantity","selectedStock","purchasedStocks","localUser","defaultAmount","validation","parseInt","buyStocks","flag","tempdeafaultAmount","tempPurchasedStocks","valid","myShares","buyingPrice","alert","setState","localStroageData","JSON","parse","localStorage","getItem","setItem","stringify","sellStocks","currentAmount","getAmount","temppurchasedStocks","localStorageData","difference","reset","totalAmount","total","componentDidMount","currentUser","auth0","user","given_name","localStoragePurchasedStocks","localStorageDefaultAmount","Card","Body","Row","Col","Form","Group","Label","Control","as","custom","onChange","e","target","required","min","max","Button","xs","Table","striped","bordered","hover","Skeleton","variant","width","height","withAuth0","stocksUrl","MainDashboard","undefined","connection","WebSocket","onmessage","saveNewStockValues","onclose","event","hideSpinner","result","up_values_count","down_values_count","current_time","now","new_stocks","Number","push","newMarketTrend","up_count","down_count","pop","showSpinner","Dashboard","hasError","error","info","console","log","getUserData","InfoBox","labelText","labelClass","contentData","contentClass","AccountSummary","accountData","personalInfo","address","getDataFromAPI","a","axios","get","then","res","status","results","catch","err","getUserInfo","location","picture","name","phone","age","dob","email_verified","Container","src","image","large","alt","lg","first","last","street","number","city","country","postcode","APPLICATION_NAME","DASHBOARD_URL","ACCOUNT_URL","useAuth0","loginWithRedirect","isAuthenticated","PrivateRoute","component","args","withAuthenticationRequired","onRedirecting","LogoutButton","logout","LandingPage","href","App","exact","path","from","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","domain","clientId","redirectUri","document","getElementById"],"mappings":"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","file":"static/js/main.8982168f.chunk.js","sourcesContent":["import React from 'react'\n\nconst UnsafeScriptsWarning = props => {\n  return (\n    <div className='container stocks-loader'>\n      <div className='card-header'>\n        <div className='card-header-icon'>\n          <span className='loader'></span>\n        </div>\n        <div className='card-header-title'>\n          Loading...\n        </div>\n      </div>\n      <div className='card'>\n        <div className='card-content'>\n          You need to click on &nbsp;<code>Load Unsafe Scripts</code>&nbsp; to proceed.\n          <br /> Look for the &nbsp;<code>shield icon</code>&nbsp; on your browser's addreess bar.  &#8679;\n         \n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default UnsafeScriptsWarning;","import React from 'react'\nimport { Sparklines, SparklinesLine } from 'react-sparklines';\nimport TimeAgo from 'react-timeago'\n\nclass StockRow extends React.Component {\n\n  getStockValueColor = (stock) =>{\n    if(stock.current_value < stock.history.slice(-2)[0].value){\n      return 'red';\n    }\n    else if(stock.current_value > stock.history.slice(-2)[0].value){\n      return 'green';\n    }\n    else{\n      return null;\n    }\n  }\n\n  render() {\n    let history = this.props.stock_data.history;\n    return (\n      <tr className={ this.props.stock_data.is_selected ? 'selected' : null } id={this.props.stock_name} onClick={this.props.toggleStockSelection.bind(this, this.props.stock_name)} >\n        <td>{this.props.stock_name.toUpperCase()}</td>\n        <td className={this.getStockValueColor(this.props.stock_data)}>\n          {this.props.stock_data.current_value.toFixed(2)}\n        </td>\n        <td>\n          <Sparklines data={history.map((history) => { return history.value})}>\n            <SparklinesLine color=\"blue\" />\n          </Sparklines>\n        </td>\n        <td className='updated_at'>\n          <TimeAgo date={ history.slice(-1)[0].time } />\n        </td>\n      </tr>\n    );\n  }\n}\n\nexport default StockRow;","import React from 'react'\n\nclass MarketTrendArrow extends React.Component {\n\n  getArrow = () => {\n    if(this.props.current_trend === 'up'){\n      return <span className='up-arrow'>&#8679;</span>\n    }\n    else if(this.props.current_trend === 'down'){\n      return <span className='down-arrow'>&#8681;</span>\n    }\n    else{\n      return '-';\n    }\n  }\n\n  render() {\n    return (\n      <span title='Market trend' className={\"icon market-trend\"}>\n        {this.getArrow()}\n      </span>\n    );\n  }\n}\n\nexport default MarketTrendArrow;","import React from 'react'\nimport { Detector } from \"react-detect-offline\";\nimport StockRow from './StockRow.jsx'\nimport MarketTrendArrow from './MarketTrendArrow.jsx'\nimport './StocksList.css'\nconst StocksList = (props) => {\n  return (\n    <div className='card' id='stocks_list'>\n      <div className='card-header'>\n        <div className='card-header-title'>\n          Stocks\n          &nbsp;\n          <Detector\n            render={({ online }) => (\n              <span className={online ? \"tag is-success\" : \"tag is-danger\"}>\n                {online ? \"Live\" : \"Offline\"}\n              </span>\n            )}\n          />\n          &nbsp;\n          <button className='button is-small' onClick={props.resetData}>Clear history</button>\n        </div>\n      </div>\n      <div className='card-content px-2'>\n        { props.areStocksLoaded() ? <p className='is-size-7 has-text-info'>Click on a stock to select/unselect</p> : null }\n        <table className='table is-bordered'>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>\n                Value\n                <MarketTrendArrow current_trend={props.market_trend} />\n              </th>\n              <th>History</th>\n              <th>Updated At</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Object.keys(props.stocks).map((stock_name, index) =>\n              {\n                let current_stock = props.stocks[stock_name];\n                return (\n                  <StockRow\n                    key={index} stock_name={stock_name}\n                    stock_data={current_stock}\n                    toggleStockSelection={props.toggleStockSelection}\n                  />\n                )\n              }\n            )}\n            { props.areStocksLoaded() ? null : <tr><td colSpan='4'>No stocks loaded yet!</td></tr> }\n          </tbody>\n        </table>\n       </div>\n    </div>\n  );\n}\n\nexport default StocksList;\n","// configurations required for ChartJs\n\nexport const chartJsConfig = { \n    responsive: true,\n    scales: {\n      xAxes: [{\n        type: 'time',\n        distribution: 'linear',\n        ticks: {\n          source: 'auto'\n        },\n        time: {\n          displayFormats: {second: 'h:mm:ss a'},\n          unit: 'second'\n        },\n        scaleLabel: {\n          display: true,\n          labelString: 'Time'\n        }\n      }],\n      yAxes: [{\n        ticks: {\n          beginAtZero: true,\n          stepValue: 10,\n          steps: 10\n        },\n        scaleLabel: {\n          display: true,\n          labelString: 'Price ($)'\n        }\n      }]\n    },\n    pan: {\n      enabled: true,\n      mode: 'x'\n    },\n    zoom: {\n      enabled: true,\n      drag: false,\n      mode: 'x'\n    }\n  };\n  \n  // keep enough colors (should be as many as the number of stocks recieved)\n  // adding these manually to make sure the colors actually look good\n  export const chartColors = [\"rgb(244, 67, 54)\", \"rgb(76, 175, 80)\", \"rgb(63, 81, 181)\", \"rgb(255, 152, 0)\", \"rgb(33, 150, 243)\", \"rgb(139, 195, 74)\", \"rgb(255, 87, 34)\", \"rgb(121, 85, 72)\", \"rgb(233, 30, 99)\", \"rgb(205, 220, 57)\", \"rgb(156, 39, 176)\", \"rgb(255, 235, 59)\", \"rgb(158, 158, 158)\", \"rgb(103, 58, 183)\", \"rgb(0, 150, 136)\", \"rgb(255, 193, 7)\", \"rgb(96, 125, 139)\", \"rgb(33, 33, 33)\", \"rgb(169, 4, 4)\", \"rgb(1, 74, 64)\", \"rgb(179, 3, 72)\", \"rgb(84, 58, 68)\"];\n  \n  export const chartDataset = (stock_name, color, stock_values) => {\n    return {\n      label: stock_name.toUpperCase(),\n      fill: false,\n      lineTension: 0,\n      backgroundColor: color,\n      borderColor: color,\n      borderCapStyle: 'butt',\n      borderJoinStyle: 'miter',\n      pointBorderColor: color,\n      pointBackgroundColor: '#fff',\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: color,\n      pointHoverBorderColor: color,\n      pointHoverBorderWidth: 2,\n      pointRadius: 3,\n      pointHitRadius: 10,\n      data: stock_values\n    };\n  };\n  ","import React from 'react'\nimport {Line} from 'react-chartjs-2';\nimport { chartJsConfig, chartColors, chartDataset } from '../chartConfig.js'\n\nclass StocksGraph extends React.Component {\n\n  updateChart = () => {\n    let chart = this.refs.chart.chartInstance;\n// If stock object os null update chart data set as empty\n    if(Object.keys(this.props.stocks).length === 0)\n    {\n      chart.data.datasets = [];\n      return chart.update();\n    }\n    //Passing tock Info \n    Object.keys(this.props.stocks).map((stock_name, index) =>\n    {\n      let current_stock = this.props.stocks[stock_name];\n      let chart_dataset = chart.data.datasets.find((dataset) => {\n        return dataset.label === stock_name.toUpperCase()\n      });\n\n      if(current_stock.is_selected)\n      {\n        let current_stock = this.props.stocks[stock_name];\n        if(chart_dataset)\n        {\n          // only update the data, don't create a new dataset for the graph\n          chart_dataset.data = this.getStockValues(current_stock);\n        }\n        else\n        {\n          // create a new dataset for graph\n          if(current_stock)\n          {\n            chart.data.datasets = chart.data.datasets.concat(\n              [\n                chartDataset(stock_name, chartColors[index], this.getStockValues(current_stock))\n              ]\n            )\n          }\n        }\n      }\n      else\n      {\n        if(chart_dataset)\n        {\n          // remove the dataset from graph\n          chart.data.datasets.splice(chart.data.datasets.indexOf(chart_dataset), 1);\n        }\n      }\n      chart.update();\n    })\n  }\n\n  componentDidUpdate = () => {\n    this.updateChart();\n  }\n\n  // returns an array of objects, {t: timestamp, y: value}\n  getStockValues = (stock) =>{\n    return stock.history.map((history) => {\n      return {t: new Date(history.time), y: history.value};\n    })\n  }\n\n  // resetZoom = () => {\n  //   this.refs.chart.chartInstance.resetZoom();\n  // }\n\n  render() {\n    return (\n      <div className={'card column p-0'} style={{margin:'10px'}} >\n        <div className='card-header'>\n          <div className='card-header-title'>\n            Graph\n          </div>\n        </div>\n        <div className='card-content'>\n          <p className='is-size-7 has-text-info'>\n            {\n              this.refs.chart &&\n              this.refs.chart.chartInstance.data.datasets.length > 0 ? 'Scroll/pinch to zoom, drag to pan.' : 'Click on any stocks on your left to see graphs.'\n            }\n          </p>\n          <Line\n            data={{datasets: []}}\n            options={chartJsConfig}\n            ref='chart'\n          />\n        </div> \n      </div>\n    );\n  }\n}\n\nexport default StocksGraph;","import React from 'react'\n\nconst StocksLoaderStatus = props => {\n  if(props.connectionError) {\n    return (\n      <div className='is-medium'>\n        <span className='has-text-danger' >Server sent no data. Probably the market is closed at the moment. </span>\n        <br />(Come back later? :-))\n      </div>\n    );\n  } else {\n    return (\n      <div className=' is-large is-success'>\n        <span className='loader'> &nbsp;</span>\n      </div>\n    );\n  }\n}\n\nexport default StocksLoaderStatus;","import React, { Component } from 'react'\nimport {Card,Button,Table,Row,Col,Form} from 'react-bootstrap'\nimport './ClientStock.css';\nimport { withAuth0 } from '@auth0/auth0-react';\nimport Skeleton from '@material-ui/lab/Skeleton';\n\n\nclass ClientStock extends Component {\n    state = { \n        show:false,\n        quantity:null,\n        selectedStock:null,\n        purchasedStocks:{},\n        localUser:null,\n        defaultAmount:100000,\n     }\n    validation=()=>{\n      let {quantity,selectedStock}=this.state;\n      quantity=parseInt(quantity);\n      if(typeof quantity===\"number\" && quantity>=1 &&quantity<11)\n      {\n        if(typeof selectedStock===\"string\" && selectedStock!==null)\n          return true;\n        else \n          return false;\n      }\n      else return false;\n    }\n    buyStocks=()=>{\n      let {quantity,selectedStock,purchasedStocks,defaultAmount,localUser}=this.state;\n      let flag=0;\n      let tempdeafaultAmount=defaultAmount;\n      let tempPurchasedStocks=purchasedStocks;\n      const valid=this.validation();\n      quantity=parseInt(quantity);\n       if(valid){\n          let myShares=0,buyingPrice=0;\n          myShares+=quantity;\n          if(Object.keys(purchasedStocks).length===0)\n          {\n            buyingPrice=(this.props.stocks[selectedStock].current_value).toFixed(2);\n            tempdeafaultAmount=tempdeafaultAmount-(buyingPrice*myShares)\n            tempPurchasedStocks[selectedStock]={\"value\":buyingPrice,\"quantity\":quantity, \"myShares\":myShares}\n          }\n          else{\n            //To find the existing stock\n            Object.keys(purchasedStocks).map(stock=>{\n              buyingPrice=(this.props.stocks[selectedStock].current_value).toFixed(2);\n              if(stock===selectedStock)\n              {\n                myShares=purchasedStocks[stock].myShares+purchasedStocks[stock].quantity;\n                tempdeafaultAmount=tempdeafaultAmount-(buyingPrice*myShares)\n                tempPurchasedStocks[selectedStock]={\"value\":buyingPrice,\"quantity\":quantity, \"myShares\":myShares}\n                flag=1;\n              }\n            })\n            //To add the new stock in the existing list\n            if(!flag){\n              tempdeafaultAmount=tempdeafaultAmount-(buyingPrice*myShares)\n              tempPurchasedStocks[selectedStock]={\"value\":buyingPrice,\"quantity\":quantity, \"myShares\":myShares}\n            }\n          }\n            \n        }\n       else{\n         alert(\"Please upload data properly\");\n       }\n      this.setState({purchasedStocks:tempPurchasedStocks,defaultAmount:tempdeafaultAmount})\n      let localStroageData=JSON.parse(localStorage.getItem(localUser));\n      localStroageData.purchasedStocks=tempPurchasedStocks;\n      localStroageData.defaultAmount=tempdeafaultAmount;\n      localStroageData.purchasedStocks=tempPurchasedStocks;\n      localStorage.setItem(localUser,JSON.stringify(localStroageData))\n    }\n  \n    sellStocks=(stock)=>{\n     const {defaultAmount,purchasedStocks,localUser}=this.state;\n     const {stocks}=this.props;\n     let currentAmount= this.getAmount(purchasedStocks,defaultAmount);\n     if(!stocks[stock]) return alert(\"Please wait for the Data to load. Thank you\");\n     let currentStockValue=parseInt(stocks[stock].current_value.toFixed(2));\n     const sellAmount=currentStockValue*purchasedStocks[stock].myShares;\n     let tempdeafaultAmount=currentAmount+sellAmount;\n     let temppurchasedStocks=purchasedStocks;\n     delete(temppurchasedStocks[stock]);\n     this.setState({purchasedStocks:temppurchasedStocks,defaultAmount:tempdeafaultAmount});\n     let localStorageData=JSON.parse(localStorage.getItem(localUser));\n     if(localStorageData.purchasedStocks[stock]!==null){\n      delete localStorageData.purchasedStocks[stock]\n      localStorage.setItem(localUser,JSON.stringify(localStorageData));\n     }\n    }\n    getStockValueColor = (stock) =>{\n      const {stocks}=this.props;\n      if(!stocks[stock]) return null;\n      const {purchasedStocks}=this.state;\n      let difference=stocks[stock].current_value.toFixed(2)-purchasedStocks[stock].value;\n      if(difference>0){\n        return 'green'\n      }\n      else if(difference<0)\n      {\n        return 'red';\n      }\n      else{\n        return 'normal';\n      }\n    }\n    reset=()=>{\n      const {defaultAmount,localUser}=this.state;\n      this.setState({purchasedStocks:[]})\n      let data={'defaultAmount':defaultAmount,'purchasedStocks':{}};\n      localStorage.setItem(localUser,JSON.stringify(data));\n    }\n    getAmount=(purchasedStocks,defaultAmount)=>{\n      let totalAmount=0,total=0;\n      if(Object.keys(purchasedStocks).length>0)\n      { \n         Object.keys(purchasedStocks).map((stock)=>{\n           if(this.props.stocks[stock]){\n            totalAmount=totalAmount+(this.props.stocks[stock].current_value*purchasedStocks[stock].myShares);\n            total=(defaultAmount)+totalAmount;\n           }\n      })\n      return total;\n    }\n    else\n      return defaultAmount;\n    }\n    componentDidMount=()=>{\n      const {defaultAmount}=this.state;\n      let currentUser=this.props.auth0.user.given_name;\n       if(localStorage.getItem(currentUser))\n       {\n         let data=JSON.parse(localStorage.getItem(currentUser));\n         let localStoragePurchasedStocks=data.purchasedStocks;\n         let localStorageDefaultAmount=data.defaultAmount;\n         this.setState({localUser:currentUser,defaultAmount:localStorageDefaultAmount,purchasedStocks:localStoragePurchasedStocks})\n       }\n       else\n       {\n         let data={'defaultAmount':defaultAmount,'purchasedStocks':{}};\n         localStorage.setItem(currentUser,JSON.stringify(data))\n       }\n    }\n    render() { \n      const {purchasedStocks,defaultAmount}=this.state;\n      const {stocks}=this.props;\n        return (  \n            <>\n        {this.props.areStocksLoaded() ? <Card.Body className='client-stock-main-conatiner' >\n        <div className='client-stock-container'>\n           <Row>\n             <Col>\n               <Row className='client-stock-container-row'>\n                    <div className='add-stock-amount'>\n                      <h1>{this.getAmount(purchasedStocks,defaultAmount).toFixed(2)}</h1>\n                    </div>\n                </Row>\n                <Row>\n                     <div className='container'>\n                      <Form>\n                        <Form.Group>\n                          <Form.Label>Stock</Form.Label>\n                              <Form.Control as=\"select\" custom onChange={(e)=>{this.setState({selectedStock:e.target.value}) }}>\n                                {\n                                  this.props.stocks && Object.keys(this.props.stocks).map((data)=>{\n                                   return <option>{data}</option>\n                                })}\n                              </Form.Control>\n                        </Form.Group>\n                        <Form.Group>\n                          <Form.Label>Quantity</Form.Label>\n                          <Form.Control required type=\"number\"onChange={(e)=>{this.setState({quantity:e.target.value})}} min={0} max={10}/> \n                        </Form.Group>\n                        <Button className='mx-3' onClick={()=>{this.buyStocks()}}>Buy stock</Button>\n                      </Form>\n                   </div>\n                </Row>\n             </Col>\n             <Col xs={12}>\n                 <Card.Body className='client-stock-holding'>\n                   <div className='client-stock-holding-container'> \n                      <div className='client-stock-holdings'>\n                          <h1>My Stocks</h1>\n                      </div>\n                      <div className='client-holdings-reset'>\n                              <Button onClick={()=>{this.reset()}}>Reset</Button>\n                      </div>\n                   </div>\n                   {Object.keys(purchasedStocks).length>0 ? (\n                   <div className='stocks-holding-container'>\n                      <Table striped bordered hover>\n                       <thead>\n                          <tr>\n                            <th>Name</th>\n                            <th>Buy value</th>\n                            <th>\n                              Live Value\n                            </th>\n                            <th>Shares owned</th>\n                            <th>Net Value</th>\n                          </tr>\n                       </thead>\n                       <tbody>\n                         {purchasedStocks && Object.keys(purchasedStocks).map((stock)=>{\n                        return (\n                          <tr> \n                            <td>{stock}</td>\n                            <td>{purchasedStocks? purchasedStocks[stock].value:<Skeleton variant='rect' width='50px'/>}</td>\n                            <td>{stocks[stock] ? stocks[stock].current_value.toFixed(2):<Skeleton variant='rect' width='50px'/>}</td>\n                            <td>{purchasedStocks? purchasedStocks[stock].myShares:<Skeleton variant='rect' width='50px'/>}</td>\n                            <td className={this.getStockValueColor(stock)}>{stocks[stock] ? (stocks[stock].current_value*purchasedStocks[stock].myShares).toFixed(2):<Skeleton variant='rect' width='50px'/>}</td>\n                            <td><Button onClick={()=>this.sellStocks(stock)}>sell</Button></td>\n                          </tr>\n                          )\n                          })}  \n                        </tbody>\n                       </Table>\n                   </div> ):(<h2 className='p-3'>No Stocks in your account</h2>)}\n                 </Card.Body>\n            </Col>\n            </Row>\n        </div>\n      </Card.Body>: <Skeleton variant='react' height='20rem' width='100%'/>}\n      </>\n      );\n    }\n}\n \nexport default withAuth0(ClientStock);","import React,{Component} from 'react'\nimport * as bulma from \"reactbulma\";\nimport StocksList from \"./StocksList.jsx\";\nimport StocksGraph from \"./StocksGraph.jsx\";\nimport StocksLoaderStatus from \"./StocksLoaderStatus.jsx\";\nimport ClientStock from './clientStocks/ClientStock.jsx';\n\nconst stocksUrl ='ws://stocks.mnet.website/';\n\nclass MainDashboard extends Component {\n    state = {\n        // stocks = {name: {current_value: 12, history: [{time: '2131', value: 45}, ...], is_selected: false}, ...}\n         stocks: {},\n         market_trend: undefined, // 'up' or 'down'\n         connectionError: false,\n        }\n        componentDidMount = () => {\n          this.connection = new WebSocket(stocksUrl);\n          this.connection.onmessage = this.saveNewStockValues;\n          this.connection.onclose = () => { this.setState({connectionError: true})}\n        }\n      \n        saveNewStockValues = (event) => {\n          this.props.hideSpinner();\n          let result = JSON.parse(event.data);\n          let [up_values_count, down_values_count] = [0, 0];\n          // time stored in histories should be consisitent across stocks(better for graphs)\n          let current_time = Date.now();\n          let new_stocks = this.state.stocks\n          result.map((stock) =>\n          {\n            // stock = ['name', 'value']\n            if(this.state.stocks[stock[0]])\n            {\n              new_stocks[stock[0]].current_value > Number(stock[1]) ? up_values_count++ : down_values_count++;\n              new_stocks[stock[0]].current_value = Number(stock[1])\n              new_stocks[stock[0]].history.push({time: current_time, value: Number(stock[1])})\n            }\n            else\n            {\n              new_stocks[stock[0]] = { current_value: stock[1], history: [{time: Date.now(), value: Number(stock[1])}], is_selected: false }\n            }\n          });\n          this.setState({stocks: new_stocks, market_trend: this.newMarketTrend(up_values_count, down_values_count)})\n        }\n        // it's about the values that just came in, and not all the stocks\n        newMarketTrend = (up_count, down_count) => {\n          if(up_count === down_count) return undefined;\n          return up_count > down_count ? 'up' : 'down'\n        }\n      \n        toggleStockSelection = (stock_name) => {\n          let new_stocks = this.state.stocks;\n          //change the reset stock to true or false based on teh sleected stock\n          new_stocks[stock_name].is_selected = !new_stocks[stock_name].is_selected\n          this.setState({ stocks: new_stocks })\n        }\n      \n        resetData = () => {\n          let new_stocks = this.state.stocks;\n          // resetting the history value\n          Object.keys(this.state.stocks).map((stock_name, index) =>\n          {\n            new_stocks[stock_name].history = [new_stocks[stock_name].history.pop()];\n          });\n       \n          this.setState({ stocks: new_stocks });\n        }\n        \n        areStocksLoaded = () => {\n          return Object.keys(this.state.stocks).length > 0;\n        }\n      \n        render() {\n          return (\n            <div className='container'>\n              <div className='columns'>\n                <StocksList\n                  stocks={this.state.stocks}\n                  toggleStockSelection={this.toggleStockSelection}\n                  resetData={this.resetData}\n                  market_trend={this.state.market_trend}\n                  areStocksLoaded={this.areStocksLoaded}\n                />\n                <StocksGraph stocks={this.state.stocks} />\n              </div>\n              <div>\n                <ClientStock areStocksLoaded={this.areStocksLoaded} stocks={this.state.stocks}/>\n              </div>\n              <div className={ this.props.showSpinner ? 'modal is-active' : 'modal' }>\n                <div className=\"modal-background\"></div>\n                  <StocksLoaderStatus connectionError={this.state.connectionError} />\n                </div>\n            </div>\n          );\n        }\n}\n \nexport default MainDashboard;","import React, { Component } from 'react';\nimport './Dashboard.css';\nimport UnsafeScriptsWarning from \"./UnsafeScriptsWarning\";\nimport MainDashboard from './MainDashboard';\nclass Dashboard extends Component {\n\n  state = {\n    hasError: false,\n    showSpinner: true\n  }\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    console.log('some error has occured');\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, info) {\n    // You can also log the error to an error reporting service\n    console.log(error, info);\n  }\n\n  hideSpinner = () => {\n    this.setState({showSpinner: false});\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <UnsafeScriptsWarning />;\n    }\n    return (\n         <div className=\"app-body\">\n            <div className=\"main-body-container\">\n               <MainDashboard hideSpinner={this.hideSpinner} user={this.props.user} showSpinner={this.state.showSpinner} />\n            </div>\n          </div>\n    );\n  }\n}\n\nexport default Dashboard;\n","export const getUserData='https://randomuser.me/api'","import React, { Component } from 'react';\nimport Skeleton from '@material-ui/lab/Skeleton';\nclass InfoBox extends Component {\n   \n    render() { \n        const {labelText,labelClass,contentData,contentClass}=this.props;\n        if(labelText===null||labelClass===null||contentData===null||contentClass===null){\n            return (<Skeleton variant=\"rect\"  />)\n        }\n        return (  \n        <>\n        <div className={`${labelClass}`}>\n        <span>{labelText}</span>\n        </div>\n         <div className={`${contentClass}`}>\n          <span>{contentData}</span>\n         </div>\n         </> \n         );\n    }\n}\n \nexport default InfoBox;","import * as React from 'react';\nimport { Component } from 'react';\nimport axios from 'axios';\nimport { withAuth0 } from '@auth0/auth0-react';\nimport { Button, Card, Col, Container, Row } from 'react-bootstrap';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport './AccountSummary.css';\nimport { getUserData } from '../API';\nimport InfoBox from './common/InfoBox';\n class AccountSummary extends Component{\n    state = { \n        accountData:null,\n        personalInfo:null,\n        address:null,\n      }\n\n    getDataFromAPI = async () => {\n       return (\n            await axios.get(getUserData).then((res) => {\n\t\t\t            \tif (res.status === 200) {\n                      return (res.data.results[0])\n\t\t\t            \t}\n\t            \t\t}).catch((err) => console.log(err))\n        ) };\n\t\t\n    getUserInfo= (accountData)=>{\n        const {location,picture,name,phone,dob:{age}}=accountData;\n        let address={};\n        let personalInfo={};\n        address['location']=location;\n        personalInfo['image']=picture;\n        personalInfo['name']=name;\n        personalInfo['phone']=phone;\n        personalInfo['age']=age;\n        this.setState({personalInfo,address});\n        return null;\n        \n    }\n    reset=(user)=>{\n      let data={'defaultAmount':100000,'purchasedStocks':{}};\n      if(user.email_verified){\n          const getUser=JSON.parse(localStorage.getItem(user.given_name));\n          if(getUser){\n          localStorage.setItem(user.given_name,JSON.stringify(data));\n          return alert('Sucessfully reset the user');\n          }\n          else{\n            alert('User doesnt exists on out DB=>');\n          }\n      }\n      else{\n        return alert('User doesnt exists on out DB');\n    }\n    }\n\tcomponentDidMount = async () => {\n       let data= await this.getDataFromAPI();\n       this.getUserInfo(data);\n       this.setState({accountData:data})\n\t};\n    render() { \n     const {personalInfo,address}=this.state;\n     const {user}=this.props.auth0;\n     console.log(user);\n        return ( \n            <Container className='account-summary-container'>\n                <div className=\"account-summary-main-container\">\n                  {/* Random User Image from the API*/}\n                <div className=\"account-summary-image\">\n                    {personalInfo ?(<img src={`${personalInfo.image.large}`} alt=\"image\"/>) :(<Skeleton variant=\"circle\" width={200} height={200} />)}\n                </div>\n                <Card.Body className=\"account-summary-card-body\">\n                  {/* User personal Info */}\n                    <Row className=\"account-summary-personal-information-conatainer\">\n                      <Col lg={4} xs={12} className=\"account-summary-name-information-row\">\n                          {personalInfo?(<InfoBox labelText='NAME' labelClass='account-summary-name-label' contentData={`${personalInfo?.name.title}. ${personalInfo?.name.first}  ${personalInfo?.name.last}`} contentClass='account-summary-name'/> ):(<Skeleton variant=\"rect\" width={200}/>)} \n                      </Col>\n                      <Col lg={4} xs={12} className=\"account-summary-age-information-row\">\n                          {personalInfo?(<InfoBox labelText='AGE' labelClass='account-summary-age-label' contentData={`${personalInfo?.age}`} contentClass='account-summary-age'/>):(<Skeleton variant=\"rect\" width={200}/>)} \n                      </Col>\n                      <Col lg={4} xs={12} className=\"account-summary-phone-information-row\">\n                          {personalInfo?(\n                          ( <InfoBox labelText='PHONE' labelClass='account-summary-phone-label' contentData={`${personalInfo?.phone}`} contentClass='account-summary-phone'/>)\n                          ):(<Skeleton variant=\"rect\" width={200}/>)} \n                      </Col>\n                    </Row>\n                    {/* User Address Info */}\n                    <Row className=\"account-summary-address-information-conatainer\">\n                      <Col lg={4} xs={12} className=\"account-summary-street-information-row\">\n                        {address?(\n                          <InfoBox labelText='STREET' labelClass='account-summary-street-label' contentData={`${address?.location.street.number}   ${address?.location.street.name}`} contentClass='account-summary-street'/>\n                        ):(<Skeleton variant=\"rect\" width={200}/>)}\n                      </Col>\n                      <Col lg={4} xs={12} className=\"account-summary-country-information-row\">\n                        {address?(\n                          <InfoBox labelText='CITY' labelClass='account-summary-city-label' contentData={`${address?.location.city}`} contentClass='account-summary-city'/>\n                        ):(<Skeleton variant=\"rect\" width={200}/>)}\n                      </Col>\n                      <Col lg={4} xs={12} className=\"account-summary-state-information-row\"> {address?(\n                          <InfoBox labelText='Country' labelClass='account-summary-country-label' contentData={`${address?.location.country}`} contentClass='account-summary-country'/>\n                          ):(<Skeleton variant=\"rect\" width={200}/>)} </Col>\n                      <Col lg={4} xs={12} className=\"account-summary-country-information-row\">\n                        {address?(\n                          <InfoBox labelText='POSTAL' labelClass='account-summary-postal-label' contentData={`${address?.location.postcode}`} contentClass='account-summary-postal'/>\n                        ):(<Skeleton variant=\"rect\" width={200}/>)}\n                      </Col>\n                    </Row>\n                    <Row className=\"account-summary-signout\">\n                     <Button onClick={()=>this.reset(user)}>Reset Account</Button>\n                    </Row>\n                </Card.Body>\n                </div>\n          \n            </Container>\n        );\n    }\n}\n \nexport default withAuth0(AccountSummary);","export const APPLICATION_NAME = \"trading\";\nexport const DASHBOARD_URL = `/${APPLICATION_NAME}/dashboard`;\nexport const ACCOUNT_URL = `/${APPLICATION_NAME}/accountsummary`;","import React from 'react'\nimport { withAuth0,useAuth0 } from '@auth0/auth0-react';\nimport {Button} from 'react-bootstrap';\nimport {Card,Row,Col,Container} from 'react-bootstrap';\nimport './loginForm.css'\nconst LoginForm = () => {\n    const { loginWithRedirect, isAuthenticated } = useAuth0();\n    if(isAuthenticated){\n         loginWithRedirect()\n    }\n    else{\n        return ( \n            <Container className='login-container'>\n                <Row>\n                  <Col xs={12} className='login-body-column'>\n                    <Card.Body className='login-body'>\n                        <div className=\"homepage_nav-body\">\n                            <div className=\"homepage_image-container\">\n                                <img alt=\"Google\" height=\"92\" src=\"https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png\"/>\n                                </div>\n                                <div className=\"homepage_nav-search-input\">\n                                { !isAuthenticated && (\n                                    <Button  onClick={() => {loginWithRedirect()}} variant='primary'>Login</Button>\n                                 )}\n                            </div> \n                        </div>\n                    </Card.Body>\n                   </Col>\n                </Row>\n            </Container>\n         );\n      }\n    }\n\n \nexport default withAuth0(LoginForm);\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport {withAuthenticationRequired} from '@auth0/auth0-react';\nimport loading from \"./assets/loading.svg\";\n\n\nconst PrivateRoute = ({component,...args}) => {\n    return ( \n    <Route\n     component={withAuthenticationRequired(component,{onRedirecting:()=><loading/>})}\n     {...args}/>\n)}\n \nexport default PrivateRoute;","export default __webpack_public_path__ + \"static/media/loading.330b7d99.svg\";","import React from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { Button} from 'react-bootstrap';\n\nconst LogoutButton = () => {\n  const { logout, isAuthenticated } = useAuth0();\n  return (\n    isAuthenticated && (\n     <Button variant='danger' onClick={()=>{logout()}}>SignOut</Button>  \n    )\n  )\n}\n\nexport default LogoutButton","import React, { Component } from 'react'\nimport './LandingPage.css';\nimport LogoutButton from './LogoutButton';\nimport {APPLICATION_NAME} from '/Users/mcda/Desktop/Perennia Work/trade/src/DashboardConstants.jsx'\nimport {withAuth0} from '@auth0/auth0-react';\nclass LandingPage extends Component{\n    render() { \n      const {user}=this.props.auth0;\n       return (\n     <div className=\"main-conatianer-header\">\n         {/* Account Logo */}\n         <div className=\"main-conatianer-header-logo\">\n            {user? <a href={`/${APPLICATION_NAME}/dashboard`}>Company</a>:'Company'}\n         </div>\n         {/* icons */}\n        {user && (<div className=\"menu-icons\">\n         <div className=\"menu-icons-anchor\">\n           <a href={`/${APPLICATION_NAME}/accountsummary`}>Account</a>\n         </div>\n         <div className=\"menu-icons-signout\">\n         <LogoutButton/>\n          </div>\n         </div>)\n        }\n     </div>\n       );\n    }\n}\nexport default withAuth0(LandingPage);","import React, { Component } from 'react';\nimport {Redirect,Route,Switch} from 'react-router-dom';\nimport { withAuth0 } from '@auth0/auth0-react';\nimport Dashboard from '/Users/mcda/Desktop/Perennia Work/trade/src/components/Dashboard.jsx';\nimport AccountSummary from '/Users/mcda/Desktop/Perennia Work/trade/src/components/AccountSummary.jsx';\nimport {ACCOUNT_URL,DASHBOARD_URL} from './DashboardConstants';\nimport LoginForm from './auth/loginForm';\nimport PrivateRoute from './private-route';\nimport LandingPage from './components/LandingPage';\nimport './App.css';\nclass App extends Component {\n  render() {\n  \n    return (\n      <div className='App'>\n        <div className=\"header-container\">\n             <LandingPage/>\n         </div>\n         <Switch>\n            <Route exact path='/login' render={(props) => (<LoginForm {...props}/>)}></Route>\n            <PrivateRoute path={`${ACCOUNT_URL}`} component={AccountSummary}></PrivateRoute>\n            <PrivateRoute path={`${DASHBOARD_URL}`} component={Dashboard} {...this.props}></PrivateRoute>\n            <Redirect from='/' to='/login' />\n          </Switch> \n      </div>\n    );\n  }\n}\n \nexport default withAuth0(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Auth0Provider } from '@auth0/auth0-react';\n\nconst domain=\"dev-gslwvf8o.us.auth0.com\"\nconst clientId=\"6pXEng5Rr5b2HzylZEtO7PAay9kcn2BC\"\n\nReactDOM.render(\n  <BrowserRouter>\n     <Auth0Provider domain={domain} clientId={clientId} redirectUri='https://a00433626.github.io/trading/dashboard'>\n         <App />\n     </Auth0Provider>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}