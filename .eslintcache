[{"/Users/mcda/Desktop/Perennia Work/trade/src/index.js":"1","/Users/mcda/Desktop/Perennia Work/trade/src/reportWebVitals.js":"2","/Users/mcda/Desktop/Perennia Work/trade/src/App.js":"3","/Users/mcda/Desktop/Perennia Work/trade/src/components/Dashboard.jsx":"4","/Users/mcda/Desktop/Perennia Work/trade/src/components/UnsafeScriptsWarning.jsx":"5","/Users/mcda/Desktop/Perennia Work/trade/src/components/MainDashboard.jsx":"6","/Users/mcda/Desktop/Perennia Work/trade/src/components/StocksList.jsx":"7","/Users/mcda/Desktop/Perennia Work/trade/src/components/StocksLoaderStatus.jsx":"8","/Users/mcda/Desktop/Perennia Work/trade/src/components/StocksGraph.jsx":"9","/Users/mcda/Desktop/Perennia Work/trade/src/components/MarketTrendArrow.jsx":"10","/Users/mcda/Desktop/Perennia Work/trade/src/components/StockRow.jsx":"11","/Users/mcda/Desktop/Perennia Work/trade/src/chartConfig.js":"12","/Users/mcda/Desktop/Perennia Work/trade/src/components/LandingPage.jsx":"13","/Users/mcda/Desktop/Perennia Work/trade/src/components/AccountSummary.jsx":"14","/Users/mcda/Desktop/Perennia Work/trade/src/API.js":"15","/Users/mcda/Desktop/Perennia Work/trade/src/components/common/InfoBox.jsx":"16","/Users/mcda/Desktop/Perennia Work/trade/src/components/clientStocks/ClientStock.jsx":"17","/Users/mcda/Desktop/Perennia Work/trade/src/auth/loginForm.jsx":"18","/Users/mcda/Desktop/Perennia Work/trade/src/components/LoginButton.jsx":"19","/Users/mcda/Desktop/Perennia Work/trade/src/components/LogoutButton.jsx":"20","/Users/mcda/Desktop/Perennia Work/trade/src/private-route.js":"21","/Users/mcda/Desktop/Perennia Work/trade/src/DashboardConstants.jsx":"22","/Users/mcda/Desktop/FunProjects/trade/src/index.js":"23","/Users/mcda/Desktop/FunProjects/trade/src/App.js":"24","/Users/mcda/Desktop/FunProjects/trade/src/reportWebVitals.js":"25","/Users/mcda/Desktop/FunProjects/trade/src/private-route.js":"26","/Users/mcda/Desktop/FunProjects/trade/src/DashboardConstants.jsx":"27","/Users/mcda/Desktop/FunProjects/trade/src/auth/loginForm.jsx":"28","/Users/mcda/Desktop/FunProjects/trade/src/components/LandingPage.jsx":"29","/Users/mcda/Desktop/FunProjects/trade/src/components/LogoutButton.jsx":"30","/Users/mcda/Desktop/FunProjects/trade/src/components/Dashboard.jsx":"31","/Users/mcda/Desktop/FunProjects/trade/src/components/UnsafeScriptsWarning.jsx":"32","/Users/mcda/Desktop/FunProjects/trade/src/components/MainDashboard.jsx":"33","/Users/mcda/Desktop/FunProjects/trade/src/components/StocksGraph.jsx":"34","/Users/mcda/Desktop/FunProjects/trade/src/components/StocksLoaderStatus.jsx":"35","/Users/mcda/Desktop/FunProjects/trade/src/components/StocksList.jsx":"36","/Users/mcda/Desktop/FunProjects/trade/src/components/clientStocks/ClientStock.jsx":"37","/Users/mcda/Desktop/FunProjects/trade/src/chartConfig.js":"38","/Users/mcda/Desktop/FunProjects/trade/src/components/MarketTrendArrow.jsx":"39","/Users/mcda/Desktop/FunProjects/trade/src/components/StockRow.jsx":"40","/Users/mcda/Desktop/FunProjects/trade/src/components/AccountSummary.jsx":"41","/Users/mcda/Desktop/FunProjects/trade/src/API.js":"42","/Users/mcda/Desktop/FunProjects/trade/src/components/common/InfoBox.jsx":"43"},{"size":826,"mtime":1607213581405,"results":"44","hashOfConfig":"45"},{"size":362,"mtime":1606917366012,"results":"46","hashOfConfig":"45"},{"size":1177,"mtime":1607208473879,"results":"47","hashOfConfig":"45"},{"size":1064,"mtime":1607276179942,"results":"48","hashOfConfig":"45"},{"size":711,"mtime":1606923010428,"results":"49","hashOfConfig":"45"},{"size":4078,"mtime":1607278796983,"results":"50","hashOfConfig":"45"},{"size":1987,"mtime":1607279908456,"results":"51","hashOfConfig":"45"},{"size":493,"mtime":1607276271912,"results":"52","hashOfConfig":"45"},{"size":2689,"mtime":1607125715947,"results":"53","hashOfConfig":"45"},{"size":532,"mtime":1606922798253,"results":"54","hashOfConfig":"45"},{"size":1259,"mtime":1607280401162,"results":"55","hashOfConfig":"45"},{"size":2011,"mtime":1607137750894,"results":"56","hashOfConfig":"45"},{"size":975,"mtime":1607224194173,"results":"57","hashOfConfig":"45"},{"size":5929,"mtime":1607207159899,"results":"58","hashOfConfig":"45"},{"size":52,"mtime":1607208495575,"results":"59","hashOfConfig":"45"},{"size":647,"mtime":1606934828563,"results":"60","hashOfConfig":"45"},{"size":11336,"mtime":1607279233501,"results":"61","hashOfConfig":"45"},{"size":1419,"mtime":1607207912434,"results":"62","hashOfConfig":"45"},{"size":375,"mtime":1607207265802,"results":"63","hashOfConfig":"45"},{"size":345,"mtime":1607207282234,"results":"64","hashOfConfig":"45"},{"size":387,"mtime":1607120552228,"results":"65","hashOfConfig":"45"},{"size":171,"mtime":1607140176276,"results":"66","hashOfConfig":"45"},{"size":832,"mtime":1617592123599,"results":"67","hashOfConfig":"68"},{"size":1273,"mtime":1617659586664,"results":"69","hashOfConfig":"68"},{"size":362,"mtime":1617591914132,"results":"70","hashOfConfig":"68"},{"size":387,"mtime":1617591914132,"results":"71","hashOfConfig":"68"},{"size":132,"mtime":1617658894399,"results":"72","hashOfConfig":"68"},{"size":1419,"mtime":1617591914129,"results":"73","hashOfConfig":"68"},{"size":952,"mtime":1617659212383,"results":"74","hashOfConfig":"68"},{"size":345,"mtime":1617591914130,"results":"75","hashOfConfig":"68"},{"size":1064,"mtime":1617591914130,"results":"76","hashOfConfig":"68"},{"size":711,"mtime":1617591914131,"results":"77","hashOfConfig":"68"},{"size":4078,"mtime":1617591914130,"results":"78","hashOfConfig":"68"},{"size":2689,"mtime":1617591914131,"results":"79","hashOfConfig":"68"},{"size":493,"mtime":1617591914131,"results":"80","hashOfConfig":"68"},{"size":1987,"mtime":1617591914131,"results":"81","hashOfConfig":"68"},{"size":11004,"mtime":1617594327773,"results":"82","hashOfConfig":"68"},{"size":2011,"mtime":1617591914129,"results":"83","hashOfConfig":"68"},{"size":532,"mtime":1617591914130,"results":"84","hashOfConfig":"68"},{"size":1259,"mtime":1617591914131,"results":"85","hashOfConfig":"68"},{"size":5929,"mtime":1617591914130,"results":"86","hashOfConfig":"68"},{"size":52,"mtime":1617591914128,"results":"87","hashOfConfig":"68"},{"size":647,"mtime":1617591914132,"results":"88","hashOfConfig":"68"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ehl26c",{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"5uqz85",{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"146"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"146"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"146"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"146"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"146"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},"/Users/mcda/Desktop/Perennia Work/trade/src/index.js",[],"/Users/mcda/Desktop/Perennia Work/trade/src/reportWebVitals.js",[],"/Users/mcda/Desktop/Perennia Work/trade/src/App.js",[],"/Users/mcda/Desktop/Perennia Work/trade/src/components/Dashboard.jsx",[],"/Users/mcda/Desktop/Perennia Work/trade/src/components/UnsafeScriptsWarning.jsx",[],"/Users/mcda/Desktop/Perennia Work/trade/src/components/MainDashboard.jsx",["182","183","184"],"/Users/mcda/Desktop/Perennia Work/trade/src/components/StocksList.jsx",[],"/Users/mcda/Desktop/Perennia Work/trade/src/components/StocksLoaderStatus.jsx",[],"/Users/mcda/Desktop/Perennia Work/trade/src/components/StocksGraph.jsx",["185"],"/Users/mcda/Desktop/Perennia Work/trade/src/components/MarketTrendArrow.jsx",[],"/Users/mcda/Desktop/Perennia Work/trade/src/components/StockRow.jsx",[],"/Users/mcda/Desktop/Perennia Work/trade/src/chartConfig.js",[],"/Users/mcda/Desktop/Perennia Work/trade/src/components/LandingPage.jsx",[],"/Users/mcda/Desktop/Perennia Work/trade/src/components/AccountSummary.jsx",["186"],"/Users/mcda/Desktop/Perennia Work/trade/src/API.js",[],"/Users/mcda/Desktop/Perennia Work/trade/src/components/common/InfoBox.jsx",[],"/Users/mcda/Desktop/Perennia Work/trade/src/components/clientStocks/ClientStock.jsx",["187"],"/Users/mcda/Desktop/Perennia Work/trade/src/auth/loginForm.jsx",[],"/Users/mcda/Desktop/Perennia Work/trade/src/components/LoginButton.jsx",["188"],"/Users/mcda/Desktop/Perennia Work/trade/src/components/LogoutButton.jsx",[],"/Users/mcda/Desktop/Perennia Work/trade/src/private-route.js",[],"/Users/mcda/Desktop/Perennia Work/trade/src/DashboardConstants.jsx",[],"/Users/mcda/Desktop/FunProjects/trade/src/index.js",["189","190","191"],"/Users/mcda/Desktop/FunProjects/trade/src/App.js",["192","193"],"import React, { Component } from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport { withAuth0 } from \"@auth0/auth0-react\";\nimport Dashboard from \"./components/Dashboard\";\nimport AccountSummary from \"./components/AccountSummary\";\nimport { ACCOUNT_URL, DASHBOARD_URL } from \"./DashboardConstants\";\nimport LoginForm from \"./auth/loginForm\";\nimport PrivateRoute from \"./private-route\";\nimport LandingPage from \"./components/LandingPage\";\nimport \"./App.css\";\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<div className=\"header-container\">\n\t\t\t\t\t<LandingPage />\n\t\t\t\t</div>\n\t\t\t\t<Switch>\n\t\t\t\t\t{/* <Route\n\t\t\t\t\t\texact\n\t\t\t\t\t\tpath=\"/login\"\n\t\t\t\t\t\trender={(props) => <LoginForm {...props} />}></Route> */}\n\t\t\t\t\t{/* <PrivateRoute\n\t\t\t\t\t\tpath={`${ACCOUNT_URL}`}\n\t\t\t\t\t\tcomponent={AccountSummary}></PrivateRoute>\n\t\t\t\t\t<PrivateRoute\n\t\t\t\t\t\tpath={`${DASHBOARD_URL}`}\n\t\t\t\t\t\tcomponent={Dashboard}\n\t\t\t\t\t\t{...this.props}></PrivateRoute> */}\n\t\t\t\t\t<Route path={`/${ACCOUNT_URL}`} component={AccountSummary}></Route>\n\t\t\t\t\t<Route\n\t\t\t\t\t\tpath={`/${DASHBOARD_URL}`}\n\t\t\t\t\t\tcomponent={Dashboard}\n\t\t\t\t\t\t{...this.props}></Route>\n\t\t\t\t\t<Redirect from=\"/\" to={`/${DASHBOARD_URL}`} />\n\t\t\t\t</Switch>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default withAuth0(App);\n","/Users/mcda/Desktop/FunProjects/trade/src/reportWebVitals.js",[],"/Users/mcda/Desktop/FunProjects/trade/src/private-route.js",[],"/Users/mcda/Desktop/FunProjects/trade/src/DashboardConstants.jsx",[],"/Users/mcda/Desktop/FunProjects/trade/src/auth/loginForm.jsx",[],["194","195"],"/Users/mcda/Desktop/FunProjects/trade/src/components/LandingPage.jsx",["196","197"],"import React, { Component } from \"react\";\nimport \"./LandingPage.css\";\nimport LogoutButton from \"./LogoutButton\";\nimport {\n\tAPPLICATION_NAM,\n\tDASHBOARD_URL,\n\tACCOUNT_URL,\n} from \"../DashboardConstants.jsx\";\nimport { withAuth0 } from \"@auth0/auth0-react\";\nclass LandingPage extends Component {\n\trender() {\n\t\tconst { user } = this.props.auth0;\n\t\treturn (\n\t\t\t<div className=\"main-conatianer-header\">\n\t\t\t\t{/* Account Logo */}\n\t\t\t\t<div className=\"main-conatianer-header-logo\">\n\t\t\t\t\t{/* {user ?  */}\n\t\t\t\t\t<a href={`${DASHBOARD_URL}`} style={{ textDecoration: \"none\" }}>\n\t\t\t\t\t\tlogo\n\t\t\t\t\t</a>\n\t\t\t\t\t{/* : \"logo\"} */}\n\t\t\t\t</div>\n\t\t\t\t{/* icons */}\n\t\t\t\t{/* {user && ( */}\n\t\t\t\t<div className=\"menu-icons\">\n\t\t\t\t\t<div className=\"menu-icons-anchor\">\n\t\t\t\t\t\t<a href={`${ACCOUNT_URL}`}>Account</a>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"menu-icons-signout\">\n\t\t\t\t\t\t<LogoutButton />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t{/* )} */}\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default withAuth0(LandingPage);\n","/Users/mcda/Desktop/FunProjects/trade/src/components/LogoutButton.jsx",[],"/Users/mcda/Desktop/FunProjects/trade/src/components/Dashboard.jsx",[],"/Users/mcda/Desktop/FunProjects/trade/src/components/UnsafeScriptsWarning.jsx",[],"/Users/mcda/Desktop/FunProjects/trade/src/components/MainDashboard.jsx",["198","199","200"],"import React,{Component} from 'react'\nimport * as bulma from \"reactbulma\";\nimport StocksList from \"./StocksList.jsx\";\nimport StocksGraph from \"./StocksGraph.jsx\";\nimport StocksLoaderStatus from \"./StocksLoaderStatus.jsx\";\nimport ClientStock from './clientStocks/ClientStock.jsx';\n\nconst stocksUrl ='ws://stocks.mnet.website/';\n\nclass MainDashboard extends Component {\n    state = {\n        // stocks = {name: {current_value: 12, history: [{time: '2131', value: 45}, ...], is_selected: false}, ...}\n         stocks: {},\n         market_trend: undefined, // 'up' or 'down'\n         connectionError: false,\n        }\n        componentDidMount = () => {\n          this.connection = new WebSocket(stocksUrl);\n          this.connection.onmessage = this.saveNewStockValues;\n          this.connection.onclose = () => { this.setState({connectionError: true})}\n        }\n      \n        saveNewStockValues = (event) => {\n          this.props.hideSpinner();\n          let result = JSON.parse(event.data);\n          let [up_values_count, down_values_count] = [0, 0];\n          // time stored in histories should be consisitent across stocks(better for graphs)\n          let current_time = Date.now();\n          let new_stocks = this.state.stocks\n          result.map((stock) =>\n          {\n            // stock = ['name', 'value']\n            if(this.state.stocks[stock[0]])\n            {\n              new_stocks[stock[0]].current_value > Number(stock[1]) ? up_values_count++ : down_values_count++;\n              new_stocks[stock[0]].current_value = Number(stock[1])\n              new_stocks[stock[0]].history.push({time: current_time, value: Number(stock[1])})\n            }\n            else\n            {\n              new_stocks[stock[0]] = { current_value: stock[1], history: [{time: Date.now(), value: Number(stock[1])}], is_selected: false }\n            }\n          });\n          this.setState({stocks: new_stocks, market_trend: this.newMarketTrend(up_values_count, down_values_count)})\n        }\n        // it's about the values that just came in, and not all the stocks\n        newMarketTrend = (up_count, down_count) => {\n          if(up_count === down_count) return undefined;\n          return up_count > down_count ? 'up' : 'down'\n        }\n      \n        toggleStockSelection = (stock_name) => {\n          let new_stocks = this.state.stocks;\n          //change the reset stock to true or false based on teh sleected stock\n          new_stocks[stock_name].is_selected = !new_stocks[stock_name].is_selected\n          this.setState({ stocks: new_stocks })\n        }\n      // reset\n        resetData = () => {\n          let new_stocks = this.state.stocks;\n          // resetting the history value\n          Object.keys(this.state.stocks).map((stock_name, index) =>\n          {\n            new_stocks[stock_name].history = [new_stocks[stock_name].history.pop()];\n          });\n       \n          this.setState({ stocks: new_stocks });\n        }\n        // Checks if stocks are loaded or not\n        areStocksLoaded = () => {\n          return Object.keys(this.state.stocks).length > 0;\n        }\n      \n        render() {\n          return (\n            <div className='container'>\n              <div className='columns'>\n                <StocksList\n                  stocks={this.state.stocks}\n                  toggleStockSelection={this.toggleStockSelection}\n                  resetData={this.resetData}\n                  market_trend={this.state.market_trend}\n                  areStocksLoaded={this.areStocksLoaded}\n                />\n                <StocksGraph stocks={this.state.stocks} />\n              </div>\n              <div>\n                <ClientStock areStocksLoaded={this.areStocksLoaded} stocks={this.state.stocks}/>\n              </div>\n              <div className={ this.props.showSpinner ? 'modal is-active' : 'modal' }>\n                <div className=\"modal-background\"></div>\n                  <StocksLoaderStatus connectionError={this.state.connectionError} />\n                </div>\n            </div>\n          );\n        }\n}\n \nexport default MainDashboard;","/Users/mcda/Desktop/FunProjects/trade/src/components/StocksGraph.jsx",["201"],"import React from 'react'\nimport {Line} from 'react-chartjs-2';\nimport { chartJsConfig, chartColors, chartDataset } from '../chartConfig.js'\n\nclass StocksGraph extends React.Component {\n\n  updateChart = () => {\n    let chart = this.refs.chart.chartInstance;\n// If stock object os null update chart data set as empty\n    if(Object.keys(this.props.stocks).length === 0)\n    {\n      chart.data.datasets = [];\n      return chart.update();\n    }\n    //Passing tock Info \n    Object.keys(this.props.stocks).map((stock_name, index) =>\n    {\n      let current_stock = this.props.stocks[stock_name];\n      let chart_dataset = chart.data.datasets.find((dataset) => {\n        return dataset.label === stock_name.toUpperCase()\n      });\n\n      if(current_stock.is_selected)\n      {\n        let current_stock = this.props.stocks[stock_name];\n        if(chart_dataset)\n        {\n          // only update the data, don't create a new dataset for the graph\n          chart_dataset.data = this.getStockValues(current_stock);\n        }\n        else\n        {\n          // create a new dataset for graph\n          if(current_stock)\n          {\n            chart.data.datasets = chart.data.datasets.concat(\n              [\n                chartDataset(stock_name, chartColors[index], this.getStockValues(current_stock))\n              ]\n            )\n          }\n        }\n      }\n      else\n      {\n        if(chart_dataset)\n        {\n          // remove the dataset from graph\n          chart.data.datasets.splice(chart.data.datasets.indexOf(chart_dataset), 1);\n        }\n      }\n      chart.update();\n    })\n  }\n\n  componentDidUpdate = () => {\n    this.updateChart();\n  }\n\n  // returns an array of objects, {t: timestamp, y: value}\n  getStockValues = (stock) =>{\n    return stock.history.map((history) => {\n      return {t: new Date(history.time), y: history.value};\n    })\n  }\n\n  // resetZoom = () => {\n  //   this.refs.chart.chartInstance.resetZoom();\n  // }\n\n  render() {\n    return (\n      <div className={'card column p-0'} style={{margin:'10px'}} >\n        <div className='card-header'>\n          <div className='card-header-title'>\n            Graph\n          </div>\n        </div>\n        <div className='card-content'>\n          <p className='is-size-7 has-text-info'>\n            {\n              this.refs.chart &&\n              this.refs.chart.chartInstance.data.datasets.length > 0 ? 'Scroll/pinch to zoom, drag to pan.' : 'Click on any stocks on your left to see graphs.'\n            }\n          </p>\n          <Line\n            data={{datasets: []}}\n            options={chartJsConfig}\n            ref='chart'\n          />\n        </div> \n      </div>\n    );\n  }\n}\n\nexport default StocksGraph;","/Users/mcda/Desktop/FunProjects/trade/src/components/StocksLoaderStatus.jsx",[],"/Users/mcda/Desktop/FunProjects/trade/src/components/StocksList.jsx",[],"/Users/mcda/Desktop/FunProjects/trade/src/components/clientStocks/ClientStock.jsx",["202"],"import React, { Component } from \"react\";\nimport { Card, Button, Table, Row, Col, Form } from \"react-bootstrap\";\nimport \"./ClientStock.css\";\nimport { withAuth0 } from \"@auth0/auth0-react\";\nimport Skeleton from \"@material-ui/lab/Skeleton\";\n\nclass ClientStock extends Component {\n\tstate = {\n\t\tshow: false,\n\t\tquantity: null,\n\t\tselectedStock: null,\n\t\tpurchasedStocks: {},\n\t\tlocalUser: null,\n\t\tdefaultAmount: 100000,\n\t};\n\tvalidation = () => {\n\t\tlet { quantity, selectedStock } = this.state;\n\t\tquantity = parseInt(quantity);\n\t\tif (typeof quantity === \"number\" && quantity >= 1 && quantity < 11) {\n\t\t\tif (typeof selectedStock === \"string\" && selectedStock !== null)\n\t\t\t\treturn true;\n\t\t\telse return false;\n\t\t} else return false;\n\t};\n\tbuyStocks = () => {\n\t\tlet {\n\t\t\tquantity,\n\t\t\tselectedStock,\n\t\t\tpurchasedStocks,\n\t\t\tdefaultAmount,\n\t\t\tlocalUser,\n\t\t} = this.state;\n\t\tlet [flag, tempdeafaultAmount, tempPurchasedStocks] = [\n\t\t\t0,\n\t\t\tdefaultAmount,\n\t\t\tpurchasedStocks,\n\t\t];\n\t\tconst valid = this.validation();\n\t\tquantity = parseInt(quantity);\n\t\tif (valid) {\n\t\t\tlet [myShares, buyingPrice] = [0, 0];\n\t\t\tmyShares += quantity;\n\t\t\t// if the user stock has no holding\n\t\t\tif (Object.keys(purchasedStocks).length === 0) {\n\t\t\t\tbuyingPrice = this.props.stocks[selectedStock].current_value.toFixed(2);\n\t\t\t\ttempdeafaultAmount = tempdeafaultAmount - buyingPrice * myShares;\n\t\t\t\ttempPurchasedStocks[selectedStock] = {\n\t\t\t\t\tvalue: buyingPrice,\n\t\t\t\t\tquantity: quantity,\n\t\t\t\t\tmyShares: myShares,\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\t//checks the buying stock already exists in the user portfolio\n\t\t\t\tObject.keys(purchasedStocks).map((stock) => {\n\t\t\t\t\tbuyingPrice = this.props.stocks[selectedStock].current_value.toFixed(\n\t\t\t\t\t\t2,\n\t\t\t\t\t);\n\t\t\t\t\tif (stock === selectedStock) {\n\t\t\t\t\t\tmyShares = purchasedStocks[stock].myShares + quantity;\n\t\t\t\t\t\ttempdeafaultAmount = tempdeafaultAmount - buyingPrice * myShares;\n\t\t\t\t\t\ttempPurchasedStocks[selectedStock] = {\n\t\t\t\t\t\t\tvalue: buyingPrice,\n\t\t\t\t\t\t\tquantity: quantity,\n\t\t\t\t\t\t\tmyShares: myShares,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tflag = 1;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t//To add the new stock in the existing list\n\t\t\t\tif (!flag) {\n\t\t\t\t\ttempdeafaultAmount = tempdeafaultAmount - buyingPrice * myShares;\n\t\t\t\t\ttempPurchasedStocks[selectedStock] = {\n\t\t\t\t\t\tvalue: buyingPrice,\n\t\t\t\t\t\tquantity: quantity,\n\t\t\t\t\t\tmyShares: myShares,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\talert(\"Please upload data properly\");\n\t\t}\n\t\ttempdeafaultAmount = tempdeafaultAmount.toFixed(2);\n\t\tthis.setState({\n\t\t\tpurchasedStocks: tempPurchasedStocks,\n\t\t\tdefaultAmount: tempdeafaultAmount,\n\t\t});\n\t\t// Getting the user from the local storage\n\t\tlet localStorageData = JSON.parse(localStorage.getItem(localUser));\n\t\t//if user exists updating the localstorage amount and stocks list\n\t\tif (localStorageData) {\n\t\t\tlocalStorageData.purchasedStocks = tempPurchasedStocks;\n\t\t\tlocalStorageData.defaultAmount = tempdeafaultAmount;\n\t\t\tlocalStorageData.purchasedStocks = tempPurchasedStocks;\n\t\t\tlocalStorage.setItem(localUser, JSON.stringify(localStorageData));\n\t\t}\n\t};\n\n\tsellStocks = (stock) => {\n\t\tconst { defaultAmount, purchasedStocks, localUser } = this.state;\n\t\tconst { stocks } = this.props;\n\t\tlet currentAmount = parseInt(defaultAmount);\n\t\t//  Waiting for stocks to load to the front end before selling them\n\t\tif (!stocks[stock])\n\t\t\treturn alert(\"Please wait for the Data to load. Thank you\");\n\t\tlet currentStockValue = stocks[stock].current_value.toFixed(2);\n\t\tconst sellAmount = currentStockValue * purchasedStocks[stock].myShares;\n\t\tconst tempdeafaultAmount = currentAmount + sellAmount;\n\t\tconst temppurchasedStocks = purchasedStocks;\n\t\tdelete temppurchasedStocks[stock];\n\t\tthis.setState({\n\t\t\tpurchasedStocks: temppurchasedStocks,\n\t\t\tdefaultAmount: tempdeafaultAmount,\n\t\t});\n\t\tlet localStorageData = JSON.parse(localStorage.getItem(localUser));\n\t\t//  If user is null return null\n\t\tif (localStorageData === null) return;\n\t\t//if user exists updating the localstorage amount and stocks list\n\t\tif (localStorageData.purchasedStocks[stock] !== null) {\n\t\t\tlocalStorageData.defaultAmount = tempdeafaultAmount;\n\t\t\tdelete localStorageData.purchasedStocks[stock];\n\t\t\tlocalStorage.setItem(localUser, JSON.stringify(localStorageData));\n\t\t}\n\t};\n\t// Get the stock P/L Color ['red' or 'green']\n\tgetStockValueColor = (stock) => {\n\t\tconst { stocks } = this.props;\n\t\tconst { purchasedStocks } = this.state;\n\t\t// Checks the stocks props if it has data in it\n\t\tif (!stocks[stock]) return null;\n\t\t// Finds the difference between the cost price and current stock price\n\t\tlet difference = stocks[stock].current_value - purchasedStocks[stock].value;\n\t\tif (difference >= 0) {\n\t\t\treturn \"green\";\n\t\t} else if (difference < 0) {\n\t\t\treturn \"red\";\n\t\t} else {\n\t\t\treturn \"-\";\n\t\t}\n\t};\n\t// Reset the user portfolio to default 100k\n\treset = () => {\n\t\tconst { localUser } = this.state;\n\t\tconst defaultAmount = 100000;\n\t\tconst purchasedStocks = {};\n\t\tthis.setState({ defaultAmount, purchasedStocks });\n\t\tlet data = {\n\t\t\tdefaultAmount: defaultAmount,\n\t\t\tpurchasedStocks: purchasedStocks,\n\t\t};\n\t\tlocalStorage.setItem(localUser, JSON.stringify(data));\n\t};\n\tcomponentDidMount = () => {\n\t\tconst { defaultAmount } = this.state;\n\t\t// Getting current user from the Auth0\n\t\tlet currentUser = \"Teja\";\n\t\t// this.props.auth0.user.given_name;\n\t\t// Checks whether the current user record already exists in the local Storage? If yes getting the records\n\t\tif (localStorage.getItem(currentUser)) {\n\t\t\tconst data = JSON.parse(localStorage.getItem(currentUser));\n\t\t\tconst localStoragePurchasedStocks = data.purchasedStocks;\n\t\t\tconst localStorageDefaultAmount = data.defaultAmount;\n\t\t\tthis.setState({\n\t\t\t\tlocalUser: currentUser,\n\t\t\t\tdefaultAmount: localStorageDefaultAmount,\n\t\t\t\tpurchasedStocks: localStoragePurchasedStocks,\n\t\t\t});\n\t\t}\n\t\t//  If the user is new? creating the record for the user with the current amount\n\t\telse {\n\t\t\tlet data = { defaultAmount: defaultAmount, purchasedStocks: {} };\n\t\t\tlocalStorage.setItem(currentUser, JSON.stringify(data));\n\t\t\tthis.setState({ defaultAmount, localUser: currentUser });\n\t\t}\n\t};\n\tgetPL = (stock) => {\n\t\tconst { stocks } = this.props;\n\t\tconst { purchasedStocks } = this.state;\n\t\tif (\n\t\t\tstock === null ||\n\t\t\tstocks[stock] === null ||\n\t\t\tpurchasedStocks[stock] === null\n\t\t)\n\t\t\treturn null;\n\t\tconst myShares = purchasedStocks[stock].myShares;\n\t\tlet costPrice = purchasedStocks[stock].value;\n\t\tlet sellingPrice = stocks[stock].current_value;\n\t\tlet pl = 0;\n\t\tlet percentage = 0;\n\t\tlet resultString;\n\t\tpl = ((sellingPrice - costPrice) * purchasedStocks[stock].myShares).toFixed(\n\t\t\t2,\n\t\t);\n\t\tpercentage = (pl / (myShares * costPrice)) * 100;\n\t\tpercentage = percentage.toFixed(2);\n\t\tif (percentage < 0) {\n\t\t\tresultString = `${pl} (${percentage}%)`;\n\t\t} else if (percentage > 0) {\n\t\t\tresultString = `${pl} (+${percentage}%)`;\n\t\t} else {\n\t\t\tresultString = \"0\";\n\t\t}\n\t\treturn resultString;\n\t};\n\trender() {\n\t\tconst { purchasedStocks, defaultAmount } = this.state;\n\t\tconst { stocks } = this.props;\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{/* Checks if the stocks are loaded */}\n\n\t\t\t\t<Card.Body className=\"client-stock-main-conatiner\">\n\t\t\t\t\t<div className=\"client-stock-container\">\n\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t{/* Stock Form buying*/}\n\t\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t\t<Row className=\"client-stock-container-row\">\n\t\t\t\t\t\t\t\t\t<div className=\"add-stock-amount\">\n\t\t\t\t\t\t\t\t\t\t<h1>{defaultAmount}</h1>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t<div className=\"container\">\n\t\t\t\t\t\t\t\t\t\t<Form>\n\t\t\t\t\t\t\t\t\t\t\t<Form.Group>\n\t\t\t\t\t\t\t\t\t\t\t\t<Form.Label>Stock</Form.Label>\n\t\t\t\t\t\t\t\t\t\t\t\t<Form.Control\n\t\t\t\t\t\t\t\t\t\t\t\t\tas=\"select\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tcustom\n\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.setState({ selectedStock: e.target.value });\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{this.props.stocks &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tObject.keys(this.props.stocks).map((data) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn <option>{data}</option>;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t\t\t\t</Form.Control>\n\t\t\t\t\t\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t\t\t\t\t\t\t<Form.Group>\n\t\t\t\t\t\t\t\t\t\t\t\t<Form.Label>Quantity</Form.Label>\n\t\t\t\t\t\t\t\t\t\t\t\t<Form.Control\n\t\t\t\t\t\t\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.setState({ quantity: e.target.value });\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\tmin={0}\n\t\t\t\t\t\t\t\t\t\t\t\t\tmax={10}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"mx-3\"\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.buyStocks();\n\t\t\t\t\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t\t\t\t\tBuy stock\n\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t</Form>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t{/* My Stock Listing */}\n\t\t\t\t\t\t\t<Col xs={12}>\n\t\t\t\t\t\t\t\t<Card.Body className=\"client-stock-holding\">\n\t\t\t\t\t\t\t\t\t<div className=\"client-stock-holding-container\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"client-stock-holdings\">\n\t\t\t\t\t\t\t\t\t\t\t<h1>My Stocks</h1>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"client-holdings-reset\">\n\t\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.reset();\n\t\t\t\t\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t\t\t\t\tReset\n\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t{Object.keys(purchasedStocks).length > 0 ? (\n\t\t\t\t\t\t\t\t\t\t<div className=\"stocks-holding-container\">\n\t\t\t\t\t\t\t\t\t\t\t<Table striped bordered hover>\n\t\t\t\t\t\t\t\t\t\t\t\t<thead className=\"thead-light\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<th>Name</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<th>Buy value</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<th>Live Value</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<th>Shares owned</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<th>P/L</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<th></th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{purchasedStocks &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tObject.keys(purchasedStocks).map((stock) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{stock}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{purchasedStocks ? (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpurchasedStocks[stock].value\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Skeleton variant=\"rect\" width=\"50px\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{stocks[stock] ? (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstocks[stock].current_value.toFixed(2)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Skeleton variant=\"rect\" width=\"50px\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{purchasedStocks ? (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpurchasedStocks[stock].myShares\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Skeleton variant=\"rect\" width=\"50px\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={this.getStockValueColor(stock)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{stocks[stock] ? (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.getPL(stock)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Skeleton variant=\"rect\" width=\"50px\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => this.sellStocks(stock)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsell\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t\t\t\t\t</Table>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<h2 className=\"p-3\">No Stocks in your account</h2>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t</div>\n\t\t\t\t</Card.Body>\n\t\t\t</>\n\t\t);\n\t}\n}\n\nexport default withAuth0(ClientStock);\n","/Users/mcda/Desktop/FunProjects/trade/src/chartConfig.js",[],"/Users/mcda/Desktop/FunProjects/trade/src/components/MarketTrendArrow.jsx",[],"/Users/mcda/Desktop/FunProjects/trade/src/components/StockRow.jsx",[],"/Users/mcda/Desktop/FunProjects/trade/src/components/AccountSummary.jsx",["203"],"import * as React from 'react';\nimport { Component } from 'react';\nimport axios from 'axios';\nimport { withAuth0 } from '@auth0/auth0-react';\nimport { Button, Card, Col, Container, Row } from 'react-bootstrap';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport './AccountSummary.css';\nimport { getUserData } from '../API';\nimport InfoBox from './common/InfoBox';\n class AccountSummary extends Component{\n    state = { \n        accountData:null,\n        personalInfo:null,\n        address:null,\n      }\n\n    getDataFromAPI = async () => {\n       return (\n            await axios.get(getUserData).then((res) => {\n\t\t\t            \tif (res.status === 200) {\n                      return (res.data.results[0])\n\t\t\t            \t}\n\t            \t\t}).catch((err) => console.log(err))\n        ) };\n\t\t\n    getUserInfo= (accountData)=>{\n        const {location,picture,name,phone,dob:{age}}=accountData;\n        let address={};\n        let personalInfo={};\n        address['location']=location;\n        personalInfo['image']=picture;\n        personalInfo['name']=name;\n        personalInfo['phone']=phone;\n        personalInfo['age']=age;\n        this.setState({personalInfo,address});\n        return null;\n        \n    }\n    reset=(user)=>{\n      let data={'defaultAmount':100000,'purchasedStocks':{}};\n      if(user.email_verified){\n          const getUser=JSON.parse(localStorage.getItem(user.given_name));\n          if(getUser){\n          localStorage.setItem(user.given_name,JSON.stringify(data));\n          return alert('Sucessfully reset the user');\n          }\n          else{\n            alert('User doesnt exists on out DB=>');\n          }\n      }\n      else{\n        return alert('User doesnt exists on out DB');\n    }\n    }\n\tcomponentDidMount = async () => {\n       let data= await this.getDataFromAPI();\n       this.getUserInfo(data);\n       this.setState({accountData:data})\n\t};\n    render() { \n     const {personalInfo,address}=this.state;\n     const {user}=this.props.auth0;\n     console.log(user);\n        return ( \n            <Container className='account-summary-container'>\n                <div className=\"account-summary-main-container\">\n                  {/* Random User Image from the API*/}\n                <div className=\"account-summary-image\">\n                    {personalInfo ?(<img src={`${personalInfo.image.large}`} alt=\"image\"/>) :(<Skeleton variant=\"circle\" width={200} height={200} />)}\n                </div>\n                <Card.Body className=\"account-summary-card-body\">\n                  {/* User personal Info */}\n                    <Row className=\"account-summary-personal-information-conatainer\">\n                      <Col lg={4} xs={12} className=\"account-summary-name-information-row\">\n                          {personalInfo?(<InfoBox labelText='NAME' labelClass='account-summary-name-label' contentData={`${personalInfo?.name.title}. ${personalInfo?.name.first}  ${personalInfo?.name.last}`} contentClass='account-summary-name'/> ):(<Skeleton variant=\"rect\" width={200}/>)} \n                      </Col>\n                      <Col lg={4} xs={12} className=\"account-summary-age-information-row\">\n                          {personalInfo?(<InfoBox labelText='AGE' labelClass='account-summary-age-label' contentData={`${personalInfo?.age}`} contentClass='account-summary-age'/>):(<Skeleton variant=\"rect\" width={200}/>)} \n                      </Col>\n                      <Col lg={4} xs={12} className=\"account-summary-phone-information-row\">\n                          {personalInfo?(\n                          ( <InfoBox labelText='PHONE' labelClass='account-summary-phone-label' contentData={`${personalInfo?.phone}`} contentClass='account-summary-phone'/>)\n                          ):(<Skeleton variant=\"rect\" width={200}/>)} \n                      </Col>\n                    </Row>\n                    {/* User Address Info */}\n                    <Row className=\"account-summary-address-information-conatainer\">\n                      <Col lg={4} xs={12} className=\"account-summary-street-information-row\">\n                        {address?(\n                          <InfoBox labelText='STREET' labelClass='account-summary-street-label' contentData={`${address?.location.street.number}   ${address?.location.street.name}`} contentClass='account-summary-street'/>\n                        ):(<Skeleton variant=\"rect\" width={200}/>)}\n                      </Col>\n                      <Col lg={4} xs={12} className=\"account-summary-country-information-row\">\n                        {address?(\n                          <InfoBox labelText='CITY' labelClass='account-summary-city-label' contentData={`${address?.location.city}`} contentClass='account-summary-city'/>\n                        ):(<Skeleton variant=\"rect\" width={200}/>)}\n                      </Col>\n                      <Col lg={4} xs={12} className=\"account-summary-state-information-row\"> {address?(\n                          <InfoBox labelText='Country' labelClass='account-summary-country-label' contentData={`${address?.location.country}`} contentClass='account-summary-country'/>\n                          ):(<Skeleton variant=\"rect\" width={200}/>)} </Col>\n                      <Col lg={4} xs={12} className=\"account-summary-country-information-row\">\n                        {address?(\n                          <InfoBox labelText='POSTAL' labelClass='account-summary-postal-label' contentData={`${address?.location.postcode}`} contentClass='account-summary-postal'/>\n                        ):(<Skeleton variant=\"rect\" width={200}/>)}\n                      </Col>\n                    </Row>\n                    <Row className=\"account-summary-signout\">\n                     <Button onClick={()=>this.reset(user)}>Reset Account</Button>\n                    </Row>\n                </Card.Body>\n                </div>\n          \n            </Container>\n        );\n    }\n}\n \nexport default withAuth0(AccountSummary);","/Users/mcda/Desktop/FunProjects/trade/src/API.js",[],"/Users/mcda/Desktop/FunProjects/trade/src/components/common/InfoBox.jsx",[],{"ruleId":"204","severity":1,"message":"205","line":2,"column":13,"nodeType":"206","messageId":"207","endLine":2,"endColumn":18},{"ruleId":"208","severity":1,"message":"209","line":30,"column":30,"nodeType":"210","messageId":"211","endLine":30,"endColumn":32},{"ruleId":"208","severity":1,"message":"209","line":62,"column":66,"nodeType":"210","messageId":"211","endLine":62,"endColumn":68},{"ruleId":"208","severity":1,"message":"209","line":16,"column":60,"nodeType":"210","messageId":"211","endLine":16,"endColumn":62},{"ruleId":"212","severity":1,"message":"213","line":69,"column":37,"nodeType":"214","endLine":69,"endColumn":91},{"ruleId":"208","severity":1,"message":"209","line":45,"column":51,"nodeType":"210","messageId":"211","endLine":45,"endColumn":53},{"ruleId":"204","severity":1,"message":"215","line":6,"column":46,"nodeType":"206","messageId":"207","endLine":6,"endColumn":50},{"ruleId":"204","severity":1,"message":"216","line":7,"column":10,"nodeType":"206","messageId":"207","endLine":7,"endColumn":23},{"ruleId":"204","severity":1,"message":"217","line":8,"column":7,"nodeType":"206","messageId":"207","endLine":8,"endColumn":13},{"ruleId":"204","severity":1,"message":"218","line":9,"column":7,"nodeType":"206","messageId":"207","endLine":9,"endColumn":15},{"ruleId":"204","severity":1,"message":"219","line":7,"column":8,"nodeType":"206","messageId":"207","endLine":7,"endColumn":17},{"ruleId":"204","severity":1,"message":"220","line":8,"column":8,"nodeType":"206","messageId":"207","endLine":8,"endColumn":20},{"ruleId":"221","replacedBy":"222"},{"ruleId":"223","replacedBy":"224"},{"ruleId":"204","severity":1,"message":"225","line":5,"column":2,"nodeType":"206","messageId":"207","endLine":5,"endColumn":17},{"ruleId":"204","severity":1,"message":"215","line":12,"column":11,"nodeType":"206","messageId":"207","endLine":12,"endColumn":15},{"ruleId":"204","severity":1,"message":"205","line":2,"column":13,"nodeType":"206","messageId":"207","endLine":2,"endColumn":18},{"ruleId":"208","severity":1,"message":"209","line":30,"column":30,"nodeType":"210","messageId":"211","endLine":30,"endColumn":32},{"ruleId":"208","severity":1,"message":"209","line":62,"column":66,"nodeType":"210","messageId":"211","endLine":62,"endColumn":68},{"ruleId":"208","severity":1,"message":"209","line":16,"column":60,"nodeType":"210","messageId":"211","endLine":16,"endColumn":62},{"ruleId":"208","severity":1,"message":"209","line":54,"column":46,"nodeType":"210","messageId":"211","endLine":54,"endColumn":48},{"ruleId":"212","severity":1,"message":"213","line":69,"column":37,"nodeType":"214","endLine":69,"endColumn":91},"no-unused-vars","'bulma' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'user' is assigned a value but never used.","'Auth0Provider' is defined but never used.","'domain' is assigned a value but never used.","'clientId' is assigned a value but never used.","'LoginForm' is defined but never used.","'PrivateRoute' is defined but never used.","no-native-reassign",["226"],"no-negated-in-lhs",["227"],"'APPLICATION_NAM' is defined but never used.","no-global-assign","no-unsafe-negation"]