[{"/Users/mcda/Desktop/Perennia Work/trade/src/index.js":"1","/Users/mcda/Desktop/Perennia Work/trade/src/reportWebVitals.js":"2","/Users/mcda/Desktop/Perennia Work/trade/src/App.js":"3","/Users/mcda/Desktop/Perennia Work/trade/src/components/Dashboard.jsx":"4","/Users/mcda/Desktop/Perennia Work/trade/src/components/UnsafeScriptsWarning.jsx":"5","/Users/mcda/Desktop/Perennia Work/trade/src/components/MainDashboard.jsx":"6","/Users/mcda/Desktop/Perennia Work/trade/src/components/StocksList.jsx":"7","/Users/mcda/Desktop/Perennia Work/trade/src/components/StocksLoaderStatus.jsx":"8","/Users/mcda/Desktop/Perennia Work/trade/src/components/StocksGraph.jsx":"9","/Users/mcda/Desktop/Perennia Work/trade/src/components/MarketTrendArrow.jsx":"10","/Users/mcda/Desktop/Perennia Work/trade/src/components/StockRow.jsx":"11","/Users/mcda/Desktop/Perennia Work/trade/src/chartConfig.js":"12","/Users/mcda/Desktop/Perennia Work/trade/src/components/LandingPage.jsx":"13","/Users/mcda/Desktop/Perennia Work/trade/src/components/AccountSummary.jsx":"14","/Users/mcda/Desktop/Perennia Work/trade/src/API.js":"15","/Users/mcda/Desktop/Perennia Work/trade/src/components/common/InfoBox.jsx":"16","/Users/mcda/Desktop/Perennia Work/trade/src/components/clientStocks/ClientStock.jsx":"17","/Users/mcda/Desktop/Perennia Work/trade/src/auth/loginForm.jsx":"18","/Users/mcda/Desktop/Perennia Work/trade/src/components/LoginButton.jsx":"19","/Users/mcda/Desktop/Perennia Work/trade/src/components/LogoutButton.jsx":"20","/Users/mcda/Desktop/Perennia Work/trade/src/private-route.js":"21","/Users/mcda/Desktop/Perennia Work/trade/src/DashboardConstants.jsx":"22"},{"size":826,"mtime":1607208390626,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":1606917366012,"results":"25","hashOfConfig":"24"},{"size":1177,"mtime":1607208473879,"results":"26","hashOfConfig":"24"},{"size":1049,"mtime":1607207938939,"results":"27","hashOfConfig":"24"},{"size":711,"mtime":1606923010428,"results":"28","hashOfConfig":"24"},{"size":4033,"mtime":1607208276019,"results":"29","hashOfConfig":"24"},{"size":1930,"mtime":1607125515583,"results":"30","hashOfConfig":"24"},{"size":494,"mtime":1606937028848,"results":"31","hashOfConfig":"24"},{"size":2689,"mtime":1607125715947,"results":"32","hashOfConfig":"24"},{"size":532,"mtime":1606922798253,"results":"33","hashOfConfig":"24"},{"size":1220,"mtime":1606959165714,"results":"34","hashOfConfig":"24"},{"size":2011,"mtime":1607137750894,"results":"35","hashOfConfig":"24"},{"size":981,"mtime":1607207970631,"results":"36","hashOfConfig":"24"},{"size":5929,"mtime":1607207159899,"results":"37","hashOfConfig":"24"},{"size":52,"mtime":1607208495575,"results":"38","hashOfConfig":"24"},{"size":647,"mtime":1606934828563,"results":"39","hashOfConfig":"24"},{"size":9820,"mtime":1607205603919,"results":"40","hashOfConfig":"24"},{"size":1419,"mtime":1607207912434,"results":"41","hashOfConfig":"24"},{"size":375,"mtime":1607207265802,"results":"42","hashOfConfig":"24"},{"size":345,"mtime":1607207282234,"results":"43","hashOfConfig":"24"},{"size":387,"mtime":1607120552228,"results":"44","hashOfConfig":"24"},{"size":171,"mtime":1607140176276,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ehl26c",{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"50"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"/Users/mcda/Desktop/Perennia Work/trade/src/index.js",[],"/Users/mcda/Desktop/Perennia Work/trade/src/reportWebVitals.js",[],["94","95"],"/Users/mcda/Desktop/Perennia Work/trade/src/App.js",[],"/Users/mcda/Desktop/Perennia Work/trade/src/components/Dashboard.jsx",[],"/Users/mcda/Desktop/Perennia Work/trade/src/components/UnsafeScriptsWarning.jsx",[],"/Users/mcda/Desktop/Perennia Work/trade/src/components/MainDashboard.jsx",["96","97","98"],"/Users/mcda/Desktop/Perennia Work/trade/src/components/StocksList.jsx",[],"/Users/mcda/Desktop/Perennia Work/trade/src/components/StocksLoaderStatus.jsx",[],"/Users/mcda/Desktop/Perennia Work/trade/src/components/StocksGraph.jsx",["99"],"import React from 'react'\nimport {Line} from 'react-chartjs-2';\nimport { chartJsConfig, chartColors, chartDataset } from '../chartConfig.js'\n\nclass StocksGraph extends React.Component {\n\n  updateChart = () => {\n    let chart = this.refs.chart.chartInstance;\n// If stock object os null update chart data set as empty\n    if(Object.keys(this.props.stocks).length === 0)\n    {\n      chart.data.datasets = [];\n      return chart.update();\n    }\n    //Passing tock Info \n    Object.keys(this.props.stocks).map((stock_name, index) =>\n    {\n      let current_stock = this.props.stocks[stock_name];\n      let chart_dataset = chart.data.datasets.find((dataset) => {\n        return dataset.label === stock_name.toUpperCase()\n      });\n\n      if(current_stock.is_selected)\n      {\n        let current_stock = this.props.stocks[stock_name];\n        if(chart_dataset)\n        {\n          // only update the data, don't create a new dataset for the graph\n          chart_dataset.data = this.getStockValues(current_stock);\n        }\n        else\n        {\n          // create a new dataset for graph\n          if(current_stock)\n          {\n            chart.data.datasets = chart.data.datasets.concat(\n              [\n                chartDataset(stock_name, chartColors[index], this.getStockValues(current_stock))\n              ]\n            )\n          }\n        }\n      }\n      else\n      {\n        if(chart_dataset)\n        {\n          // remove the dataset from graph\n          chart.data.datasets.splice(chart.data.datasets.indexOf(chart_dataset), 1);\n        }\n      }\n      chart.update();\n    })\n  }\n\n  componentDidUpdate = () => {\n    this.updateChart();\n  }\n\n  // returns an array of objects, {t: timestamp, y: value}\n  getStockValues = (stock) =>{\n    return stock.history.map((history) => {\n      return {t: new Date(history.time), y: history.value};\n    })\n  }\n\n  // resetZoom = () => {\n  //   this.refs.chart.chartInstance.resetZoom();\n  // }\n\n  render() {\n    return (\n      <div className={'card column p-0'} style={{margin:'10px'}} >\n        <div className='card-header'>\n          <div className='card-header-title'>\n            Graph\n          </div>\n        </div>\n        <div className='card-content'>\n          <p className='is-size-7 has-text-info'>\n            {\n              this.refs.chart &&\n              this.refs.chart.chartInstance.data.datasets.length > 0 ? 'Scroll/pinch to zoom, drag to pan.' : 'Click on any stocks on your left to see graphs.'\n            }\n          </p>\n          <Line\n            data={{datasets: []}}\n            options={chartJsConfig}\n            ref='chart'\n          />\n        </div> \n      </div>\n    );\n  }\n}\n\nexport default StocksGraph;","/Users/mcda/Desktop/Perennia Work/trade/src/components/MarketTrendArrow.jsx",[],"/Users/mcda/Desktop/Perennia Work/trade/src/components/StockRow.jsx",[],"/Users/mcda/Desktop/Perennia Work/trade/src/chartConfig.js",[],"/Users/mcda/Desktop/Perennia Work/trade/src/components/LandingPage.jsx",[],"/Users/mcda/Desktop/Perennia Work/trade/src/components/AccountSummary.jsx",["100"],"import * as React from 'react';\nimport { Component } from 'react';\nimport axios from 'axios';\nimport { withAuth0 } from '@auth0/auth0-react';\nimport { Button, Card, Col, Container, Row } from 'react-bootstrap';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport './AccountSummary.css';\nimport { getUserData } from '../API';\nimport InfoBox from './common/InfoBox';\n class AccountSummary extends Component{\n    state = { \n        accountData:null,\n        personalInfo:null,\n        address:null,\n      }\n\n    getDataFromAPI = async () => {\n       return (\n            await axios.get(getUserData).then((res) => {\n\t\t\t            \tif (res.status === 200) {\n                      return (res.data.results[0])\n\t\t\t            \t}\n\t            \t\t}).catch((err) => console.log(err))\n        ) };\n\t\t\n    getUserInfo= (accountData)=>{\n        const {location,picture,name,phone,dob:{age}}=accountData;\n        let address={};\n        let personalInfo={};\n        address['location']=location;\n        personalInfo['image']=picture;\n        personalInfo['name']=name;\n        personalInfo['phone']=phone;\n        personalInfo['age']=age;\n        this.setState({personalInfo,address});\n        return null;\n        \n    }\n    reset=(user)=>{\n      let data={'defaultAmount':100000,'purchasedStocks':{}};\n      if(user.email_verified){\n          const getUser=JSON.parse(localStorage.getItem(user.given_name));\n          if(getUser){\n          localStorage.setItem(user.given_name,JSON.stringify(data));\n          return alert('Sucessfully reset the user');\n          }\n          else{\n            alert('User doesnt exists on out DB=>');\n          }\n      }\n      else{\n        return alert('User doesnt exists on out DB');\n    }\n    }\n\tcomponentDidMount = async () => {\n       let data= await this.getDataFromAPI();\n       this.getUserInfo(data);\n       this.setState({accountData:data})\n\t};\n    render() { \n     const {personalInfo,address}=this.state;\n     const {user}=this.props.auth0;\n     console.log(user);\n        return ( \n            <Container className='account-summary-container'>\n                <div className=\"account-summary-main-container\">\n                  {/* Random User Image from the API*/}\n                <div className=\"account-summary-image\">\n                    {personalInfo ?(<img src={`${personalInfo.image.large}`} alt=\"image\"/>) :(<Skeleton variant=\"circle\" width={200} height={200} />)}\n                </div>\n                <Card.Body className=\"account-summary-card-body\">\n                  {/* User personal Info */}\n                    <Row className=\"account-summary-personal-information-conatainer\">\n                      <Col lg={4} xs={12} className=\"account-summary-name-information-row\">\n                          {personalInfo?(<InfoBox labelText='NAME' labelClass='account-summary-name-label' contentData={`${personalInfo?.name.title}. ${personalInfo?.name.first}  ${personalInfo?.name.last}`} contentClass='account-summary-name'/> ):(<Skeleton variant=\"rect\" width={200}/>)} \n                      </Col>\n                      <Col lg={4} xs={12} className=\"account-summary-age-information-row\">\n                          {personalInfo?(<InfoBox labelText='AGE' labelClass='account-summary-age-label' contentData={`${personalInfo?.age}`} contentClass='account-summary-age'/>):(<Skeleton variant=\"rect\" width={200}/>)} \n                      </Col>\n                      <Col lg={4} xs={12} className=\"account-summary-phone-information-row\">\n                          {personalInfo?(\n                          ( <InfoBox labelText='PHONE' labelClass='account-summary-phone-label' contentData={`${personalInfo?.phone}`} contentClass='account-summary-phone'/>)\n                          ):(<Skeleton variant=\"rect\" width={200}/>)} \n                      </Col>\n                    </Row>\n                    {/* User Address Info */}\n                    <Row className=\"account-summary-address-information-conatainer\">\n                      <Col lg={4} xs={12} className=\"account-summary-street-information-row\">\n                        {address?(\n                          <InfoBox labelText='STREET' labelClass='account-summary-street-label' contentData={`${address?.location.street.number}   ${address?.location.street.name}`} contentClass='account-summary-street'/>\n                        ):(<Skeleton variant=\"rect\" width={200}/>)}\n                      </Col>\n                      <Col lg={4} xs={12} className=\"account-summary-country-information-row\">\n                        {address?(\n                          <InfoBox labelText='CITY' labelClass='account-summary-city-label' contentData={`${address?.location.city}`} contentClass='account-summary-city'/>\n                        ):(<Skeleton variant=\"rect\" width={200}/>)}\n                      </Col>\n                      <Col lg={4} xs={12} className=\"account-summary-state-information-row\"> {address?(\n                          <InfoBox labelText='Country' labelClass='account-summary-country-label' contentData={`${address?.location.country}`} contentClass='account-summary-country'/>\n                          ):(<Skeleton variant=\"rect\" width={200}/>)} </Col>\n                      <Col lg={4} xs={12} className=\"account-summary-country-information-row\">\n                        {address?(\n                          <InfoBox labelText='POSTAL' labelClass='account-summary-postal-label' contentData={`${address?.location.postcode}`} contentClass='account-summary-postal'/>\n                        ):(<Skeleton variant=\"rect\" width={200}/>)}\n                      </Col>\n                    </Row>\n                    <Row className=\"account-summary-signout\">\n                     <Button onClick={()=>this.reset(user)}>Reset Account</Button>\n                    </Row>\n                </Card.Body>\n                </div>\n          \n            </Container>\n        );\n    }\n}\n \nexport default withAuth0(AccountSummary);","/Users/mcda/Desktop/Perennia Work/trade/src/API.js",[],"/Users/mcda/Desktop/Perennia Work/trade/src/components/common/InfoBox.jsx",[],"/Users/mcda/Desktop/Perennia Work/trade/src/components/clientStocks/ClientStock.jsx",["101","102"],"import React, { Component } from 'react'\nimport {Card,Button,Table,Row,Col,Form} from 'react-bootstrap'\nimport './ClientStock.css';\nimport { withAuth0 } from '@auth0/auth0-react';\nimport Skeleton from '@material-ui/lab/Skeleton';\n\n\nclass ClientStock extends Component {\n    state = { \n        show:false,\n        quantity:null,\n        selectedStock:null,\n        purchasedStocks:{},\n        localUser:null,\n        defaultAmount:100000,\n     }\n    validation=()=>{\n      let {quantity,selectedStock}=this.state;\n      quantity=parseInt(quantity);\n      if(typeof quantity===\"number\" && quantity>=1 &&quantity<11)\n      {\n        if(typeof selectedStock===\"string\" && selectedStock!==null)\n          return true;\n        else \n          return false;\n      }\n      else return false;\n    }\n    buyStocks=()=>{\n      let {quantity,selectedStock,purchasedStocks,defaultAmount,localUser}=this.state;\n      let flag=0;\n      let tempdeafaultAmount=defaultAmount;\n      let tempPurchasedStocks=purchasedStocks;\n      const valid=this.validation();\n      quantity=parseInt(quantity);\n       if(valid){\n          let myShares=0,buyingPrice=0;\n          myShares+=quantity;\n          if(Object.keys(purchasedStocks).length===0)\n          {\n            buyingPrice=(this.props.stocks[selectedStock].current_value).toFixed(2);\n            tempdeafaultAmount=tempdeafaultAmount-(buyingPrice*myShares)\n            tempPurchasedStocks[selectedStock]={\"value\":buyingPrice,\"quantity\":quantity, \"myShares\":myShares}\n          }\n          else{\n            //To find the existing stock\n            Object.keys(purchasedStocks).map(stock=>{\n              buyingPrice=(this.props.stocks[selectedStock].current_value).toFixed(2);\n              if(stock===selectedStock)\n              {\n                myShares=purchasedStocks[stock].myShares+purchasedStocks[stock].quantity;\n                tempdeafaultAmount=tempdeafaultAmount-(buyingPrice*myShares)\n                tempPurchasedStocks[selectedStock]={\"value\":buyingPrice,\"quantity\":quantity, \"myShares\":myShares}\n                flag=1;\n              }\n            })\n            //To add the new stock in the existing list\n            if(!flag){\n              tempdeafaultAmount=tempdeafaultAmount-(buyingPrice*myShares)\n              tempPurchasedStocks[selectedStock]={\"value\":buyingPrice,\"quantity\":quantity, \"myShares\":myShares}\n            }\n          }\n            \n        }\n       else{\n         alert(\"Please upload data properly\");\n       }\n      this.setState({purchasedStocks:tempPurchasedStocks,defaultAmount:tempdeafaultAmount})\n      let localStroageData=JSON.parse(localStorage.getItem(localUser));\n      localStroageData.purchasedStocks=tempPurchasedStocks;\n      localStroageData.defaultAmount=tempdeafaultAmount;\n      localStroageData.purchasedStocks=tempPurchasedStocks;\n      localStorage.setItem(localUser,JSON.stringify(localStroageData))\n    }\n  \n    sellStocks=(stock)=>{\n     const {defaultAmount,purchasedStocks,localUser}=this.state;\n     const {stocks}=this.props;\n     let currentAmount= this.getAmount(purchasedStocks,defaultAmount);\n     if(!stocks[stock]) return alert(\"Please wait for the Data to load. Thank you\");\n     let currentStockValue=parseInt(stocks[stock].current_value.toFixed(2));\n     const sellAmount=currentStockValue*purchasedStocks[stock].myShares;\n     let tempdeafaultAmount=currentAmount+sellAmount;\n     let temppurchasedStocks=purchasedStocks;\n     delete(temppurchasedStocks[stock]);\n     this.setState({purchasedStocks:temppurchasedStocks,defaultAmount:tempdeafaultAmount});\n     let localStorageData=JSON.parse(localStorage.getItem(localUser));\n     if(localStorageData.purchasedStocks[stock]!==null){\n      delete localStorageData.purchasedStocks[stock]\n      localStorage.setItem(localUser,JSON.stringify(localStorageData));\n     }\n    }\n    getStockValueColor = (stock) =>{\n      const {stocks}=this.props;\n      if(!stocks[stock]) return null;\n      const {purchasedStocks}=this.state;\n      let difference=stocks[stock].current_value.toFixed(2)-purchasedStocks[stock].value;\n      if(difference>0){\n        return 'green'\n      }\n      else if(difference<0)\n      {\n        return 'red';\n      }\n      else{\n        return 'normal';\n      }\n    }\n    reset=()=>{\n      const {defaultAmount,localUser}=this.state;\n      this.setState({purchasedStocks:[]})\n      let data={'defaultAmount':defaultAmount,'purchasedStocks':{}};\n      localStorage.setItem(localUser,JSON.stringify(data));\n    }\n    getAmount=(purchasedStocks,defaultAmount)=>{\n      let totalAmount=0,total=0;\n      if(Object.keys(purchasedStocks).length>0)\n      { \n         Object.keys(purchasedStocks).map((stock)=>{\n           if(this.props.stocks[stock]){\n            totalAmount=totalAmount+(this.props.stocks[stock].current_value*purchasedStocks[stock].myShares);\n            total=(defaultAmount)+totalAmount;\n           }\n      })\n      return total;\n    }\n    else\n      return defaultAmount;\n    }\n    componentDidMount=()=>{\n      const {defaultAmount}=this.state;\n      let currentUser=this.props.auth0.user.given_name;\n       if(localStorage.getItem(currentUser))\n       {\n         let data=JSON.parse(localStorage.getItem(currentUser));\n         let localStoragePurchasedStocks=data.purchasedStocks;\n         let localStorageDefaultAmount=data.defaultAmount;\n         this.setState({localUser:currentUser,defaultAmount:localStorageDefaultAmount,purchasedStocks:localStoragePurchasedStocks})\n       }\n       else\n       {\n         let data={'defaultAmount':defaultAmount,'purchasedStocks':{}};\n         localStorage.setItem(currentUser,JSON.stringify(data))\n       }\n    }\n    render() { \n      const {purchasedStocks,defaultAmount}=this.state;\n      const {stocks}=this.props;\n        return (  \n            <>\n        {this.props.areStocksLoaded() ? <Card.Body className='client-stock-main-conatiner' >\n        <div className='client-stock-container'>\n           <Row>\n             <Col>\n               <Row className='client-stock-container-row'>\n                    <div className='add-stock-amount'>\n                      <h1>{this.getAmount(purchasedStocks,defaultAmount).toFixed(2)}</h1>\n                    </div>\n                </Row>\n                <Row>\n                     <div className='container'>\n                      <Form>\n                        <Form.Group>\n                          <Form.Label>Stock</Form.Label>\n                              <Form.Control as=\"select\" custom onChange={(e)=>{this.setState({selectedStock:e.target.value}) }}>\n                                {\n                                  this.props.stocks && Object.keys(this.props.stocks).map((data)=>{\n                                   return <option>{data}</option>\n                                })}\n                              </Form.Control>\n                        </Form.Group>\n                        <Form.Group>\n                          <Form.Label>Quantity</Form.Label>\n                          <Form.Control required type=\"number\"onChange={(e)=>{this.setState({quantity:e.target.value})}} min={0} max={10}/> \n                        </Form.Group>\n                        <Button className='mx-3' onClick={()=>{this.buyStocks()}}>Buy stock</Button>\n                      </Form>\n                   </div>\n                </Row>\n             </Col>\n             <Col xs={12}>\n                 <Card.Body className='client-stock-holding'>\n                   <div className='client-stock-holding-container'> \n                      <div className='client-stock-holdings'>\n                          <h1>My Stocks</h1>\n                      </div>\n                      <div className='client-holdings-reset'>\n                              <Button onClick={()=>{this.reset()}}>Reset</Button>\n                      </div>\n                   </div>\n                   {Object.keys(purchasedStocks).length>0 ? (\n                   <div className='stocks-holding-container'>\n                      <Table striped bordered hover>\n                       <thead>\n                          <tr>\n                            <th>Name</th>\n                            <th>Buy value</th>\n                            <th>\n                              Live Value\n                            </th>\n                            <th>Shares owned</th>\n                            <th>Net Value</th>\n                          </tr>\n                       </thead>\n                       <tbody>\n                         {purchasedStocks && Object.keys(purchasedStocks).map((stock)=>{\n                        return (\n                          <tr> \n                            <td>{stock}</td>\n                            <td>{purchasedStocks? purchasedStocks[stock].value:<Skeleton variant='rect' width='50px'/>}</td>\n                            <td>{stocks[stock] ? stocks[stock].current_value.toFixed(2):<Skeleton variant='rect' width='50px'/>}</td>\n                            <td>{purchasedStocks? purchasedStocks[stock].myShares:<Skeleton variant='rect' width='50px'/>}</td>\n                            <td className={this.getStockValueColor(stock)}>{stocks[stock] ? (stocks[stock].current_value*purchasedStocks[stock].myShares).toFixed(2):<Skeleton variant='rect' width='50px'/>}</td>\n                            <td><Button onClick={()=>this.sellStocks(stock)}>sell</Button></td>\n                          </tr>\n                          )\n                          })}  \n                        </tbody>\n                       </Table>\n                   </div> ):(<h2 className='p-3'>No Stocks in your account</h2>)}\n                 </Card.Body>\n            </Col>\n            </Row>\n        </div>\n      </Card.Body>: <Skeleton variant='react' height='20rem' width='100%'/>}\n      </>\n      );\n    }\n}\n \nexport default withAuth0(ClientStock);","/Users/mcda/Desktop/Perennia Work/trade/src/auth/loginForm.jsx",[],"/Users/mcda/Desktop/Perennia Work/trade/src/components/LoginButton.jsx",["103"],"/Users/mcda/Desktop/Perennia Work/trade/src/components/LogoutButton.jsx",[],"/Users/mcda/Desktop/Perennia Work/trade/src/private-route.js",[],"/Users/mcda/Desktop/Perennia Work/trade/src/DashboardConstants.jsx",[],{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":2,"column":13,"nodeType":"110","messageId":"111","endLine":2,"endColumn":18},{"ruleId":"112","severity":1,"message":"113","line":30,"column":30,"nodeType":"114","messageId":"115","endLine":30,"endColumn":32},{"ruleId":"112","severity":1,"message":"113","line":62,"column":66,"nodeType":"114","messageId":"115","endLine":62,"endColumn":68},{"ruleId":"112","severity":1,"message":"113","line":16,"column":60,"nodeType":"114","messageId":"115","endLine":16,"endColumn":62},{"ruleId":"116","severity":1,"message":"117","line":69,"column":37,"nodeType":"118","endLine":69,"endColumn":91},{"ruleId":"112","severity":1,"message":"113","line":47,"column":51,"nodeType":"114","messageId":"115","endLine":47,"endColumn":53},{"ruleId":"112","severity":1,"message":"113","line":119,"column":50,"nodeType":"114","messageId":"115","endLine":119,"endColumn":52},{"ruleId":"108","severity":1,"message":"119","line":6,"column":46,"nodeType":"110","messageId":"111","endLine":6,"endColumn":50},"no-native-reassign",["120"],"no-negated-in-lhs",["121"],"no-unused-vars","'bulma' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'user' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]