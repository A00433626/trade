[{"/Users/mcda/Desktop/Perennia Work/trade/src/index.js":"1","/Users/mcda/Desktop/Perennia Work/trade/src/reportWebVitals.js":"2","/Users/mcda/Desktop/Perennia Work/trade/src/App.js":"3","/Users/mcda/Desktop/Perennia Work/trade/src/components/Dashboard.jsx":"4","/Users/mcda/Desktop/Perennia Work/trade/src/components/UnsafeScriptsWarning.jsx":"5","/Users/mcda/Desktop/Perennia Work/trade/src/components/MainDashboard.jsx":"6","/Users/mcda/Desktop/Perennia Work/trade/src/components/StocksList.jsx":"7","/Users/mcda/Desktop/Perennia Work/trade/src/components/StocksLoaderStatus.jsx":"8","/Users/mcda/Desktop/Perennia Work/trade/src/components/StocksGraph.jsx":"9","/Users/mcda/Desktop/Perennia Work/trade/src/components/MarketTrendArrow.jsx":"10","/Users/mcda/Desktop/Perennia Work/trade/src/components/StockRow.jsx":"11","/Users/mcda/Desktop/Perennia Work/trade/src/chartConfig.js":"12","/Users/mcda/Desktop/Perennia Work/trade/src/components/LandingPage.jsx":"13","/Users/mcda/Desktop/Perennia Work/trade/src/components/AccountSummary.jsx":"14","/Users/mcda/Desktop/Perennia Work/trade/src/API.js":"15","/Users/mcda/Desktop/Perennia Work/trade/src/components/common/InfoBox.jsx":"16","/Users/mcda/Desktop/Perennia Work/trade/src/components/clientStocks/ClientStock.jsx":"17","/Users/mcda/Desktop/Perennia Work/trade/src/auth/loginForm.jsx":"18","/Users/mcda/Desktop/Perennia Work/trade/src/AppWithRouterAccess.jsx":"19","/Users/mcda/Desktop/Perennia Work/trade/src/components/LoginButton.jsx":"20","/Users/mcda/Desktop/Perennia Work/trade/src/components/LogoutButton.jsx":"21","/Users/mcda/Desktop/Perennia Work/trade/src/private-route.js":"22"},{"size":849,"mtime":1607119577986,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":1606917366012,"results":"25","hashOfConfig":"24"},{"size":2223,"mtime":1607128670983,"results":"26","hashOfConfig":"24"},{"size":1219,"mtime":1607017229973,"results":"27","hashOfConfig":"24"},{"size":711,"mtime":1606923010428,"results":"28","hashOfConfig":"24"},{"size":4481,"mtime":1607121457217,"results":"29","hashOfConfig":"24"},{"size":1930,"mtime":1607125515583,"results":"30","hashOfConfig":"24"},{"size":494,"mtime":1606937028848,"results":"31","hashOfConfig":"24"},{"size":2689,"mtime":1607125715947,"results":"32","hashOfConfig":"24"},{"size":532,"mtime":1606922798253,"results":"33","hashOfConfig":"24"},{"size":1220,"mtime":1606959165714,"results":"34","hashOfConfig":"24"},{"size":2011,"mtime":1606922282686,"results":"35","hashOfConfig":"24"},{"size":1150,"mtime":1607120693636,"results":"36","hashOfConfig":"24"},{"size":5392,"mtime":1607124939437,"results":"37","hashOfConfig":"24"},{"size":100,"mtime":1606925296375,"results":"38","hashOfConfig":"24"},{"size":647,"mtime":1606934828563,"results":"39","hashOfConfig":"24"},{"size":8061,"mtime":1607124289589,"results":"40","hashOfConfig":"24"},{"size":2366,"mtime":1607129862379,"results":"41","hashOfConfig":"24"},{"size":1273,"mtime":1607053793848,"results":"42","hashOfConfig":"24"},{"size":410,"mtime":1607095978282,"results":"43","hashOfConfig":"24"},{"size":418,"mtime":1607119640934,"results":"44","hashOfConfig":"24"},{"size":387,"mtime":1607120552228,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1ehl26c",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"48"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"/Users/mcda/Desktop/Perennia Work/trade/src/index.js",[],["96","97"],"/Users/mcda/Desktop/Perennia Work/trade/src/reportWebVitals.js",[],"/Users/mcda/Desktop/Perennia Work/trade/src/App.js",["98","99","100"],"/Users/mcda/Desktop/Perennia Work/trade/src/components/Dashboard.jsx",[],"/Users/mcda/Desktop/Perennia Work/trade/src/components/UnsafeScriptsWarning.jsx",[],"/Users/mcda/Desktop/Perennia Work/trade/src/components/MainDashboard.jsx",["101","102","103"],"import React,{Component} from 'react'\nimport * as bulma from \"reactbulma\";\nimport StocksList from \"./StocksList.jsx\";\nimport StocksGraph from \"./StocksGraph.jsx\";\nimport StocksLoaderStatus from \"./StocksLoaderStatus.jsx\";\nimport './MainDashboard.css';\nimport ClientStock from './clientStocks/ClientStock.jsx';\n\nconst stocksUrl ='ws://stocks.mnet.website/';\n\nclass MainDashboard extends Component {\n    state = {\n        // stocks = {name: {current_value: 12, history: [{time: '2131', value: 45}, ...], is_selected: false}, ...}\n         stocks: {},\n         market_trend: undefined, // 'up' or 'down'\n         connectionError: false,\n         deafaultAmount:100000,\n        }\n      \n        componentDidMount = () => {\n          this.connection = new WebSocket(stocksUrl);\n          // console.log(this.connection );\n          this.connection.onmessage = this.saveNewStockValues;\n          // console.log(this.connection.onmessage);\n          this.connection.onclose = () => { this.setState({connectionError: true}) }\n          // let data=[];\n          // localStorage.setItem('user1',JSON.stringify(data));\n        }\n      \n        saveNewStockValues = (event) => {\n          this.props.hideSpinner();\n          let result = JSON.parse(event.data);\n          let [up_values_count, down_values_count] = [0, 0];\n      \n          // time stored in histories should be consisitent across stocks(better for graphs)\n          let current_time = Date.now();\n          let new_stocks = this.state.stocks\n          // console.log(new_stocks);\n          result.map((stock) =>\n          {\n            // stock = ['name', 'value']\n            // console.log(this.state.stocks[stock[0]],stock);\n            if(this.state.stocks[stock[0]])\n            {\n              new_stocks[stock[0]].current_value > Number(stock[1]) ? up_values_count++ : down_values_count++;\n      \n              new_stocks[stock[0]].current_value = Number(stock[1])\n              new_stocks[stock[0]].history.push({time: current_time, value: Number(stock[1])})\n            }\n            else\n            {\n              new_stocks[stock[0]] = { current_value: stock[1], history: [{time: Date.now(), value: Number(stock[1])}], is_selected: false }\n            }\n          });\n          this.setState({stocks: new_stocks, market_trend: this.newMarketTrend(up_values_count, down_values_count)})\n        }\n      \n        // it's about the values that just came in, and not all the stocks\n        newMarketTrend = (up_count, down_count) => {\n          if(up_count === down_count) return undefined;\n          return up_count > down_count ? 'up' : 'down'\n        }\n      \n        toggleStockSelection = (stock_name) => {\n          let new_stocks = this.state.stocks;\n          //change the reset stock to true or false based on teh sleected stock\n          new_stocks[stock_name].is_selected = !new_stocks[stock_name].is_selected\n          this.setState({ stocks: new_stocks })\n        }\n      \n        resetData = () => {\n          let new_stocks = this.state.stocks;\n          // resetting the history value\n          Object.keys(this.state.stocks).map((stock_name, index) =>\n          {\n            new_stocks[stock_name].history = [new_stocks[stock_name].history.pop()];\n          });\n       \n          this.setState({ stocks: new_stocks });\n        }\n        \n        areStocksLoaded = () => {\n          return Object.keys(this.state.stocks).length > 0;\n        }\n      \n        render() {\n      // console.log(this.state.stocks);\n          return (\n            <div className='container'>\n              <div className='columns'>\n                <StocksList\n                  stocks={this.state.stocks}\n                  toggleStockSelection={this.toggleStockSelection}\n                  resetData={this.resetData}\n                  market_trend={this.state.market_trend}\n                  areStocksLoaded={this.areStocksLoaded}\n                />\n                <StocksGraph stocks={this.state.stocks} />\n              </div>\n              <div>\n                <ClientStock user={this.props.user} deafaultAmount={this.state.deafaultAmount} stocks={this.state.stocks}/>\n              </div>\n              <div className={ this.props.showSpinner ? 'modal is-active' : 'modal' }>\n                <div className=\"modal-background\"></div>\n                  <StocksLoaderStatus connectionError={this.state.connectionError} />\n                </div>\n            </div>\n          );\n        }\n}\n \nexport default MainDashboard;","/Users/mcda/Desktop/Perennia Work/trade/src/components/StocksList.jsx",[],"/Users/mcda/Desktop/Perennia Work/trade/src/components/StocksLoaderStatus.jsx",[],"/Users/mcda/Desktop/Perennia Work/trade/src/components/StocksGraph.jsx",["104"],"import React from 'react'\nimport {Line} from 'react-chartjs-2';\nimport { chartJsConfig, chartColors, chartDataset } from '../chartConfig.js'\n\nclass StocksGraph extends React.Component {\n\n  updateChart = () => {\n    let chart = this.refs.chart.chartInstance;\n// If stock object os null update chart data set as empty\n    if(Object.keys(this.props.stocks).length === 0)\n    {\n      chart.data.datasets = [];\n      return chart.update();\n    }\n    //Passing tock Info \n    Object.keys(this.props.stocks).map((stock_name, index) =>\n    {\n      let current_stock = this.props.stocks[stock_name];\n      let chart_dataset = chart.data.datasets.find((dataset) => {\n        return dataset.label === stock_name.toUpperCase()\n      });\n\n      if(current_stock.is_selected)\n      {\n        let current_stock = this.props.stocks[stock_name];\n        if(chart_dataset)\n        {\n          // only update the data, don't create a new dataset for the graph\n          chart_dataset.data = this.getStockValues(current_stock);\n        }\n        else\n        {\n          // create a new dataset for graph\n          if(current_stock)\n          {\n            chart.data.datasets = chart.data.datasets.concat(\n              [\n                chartDataset(stock_name, chartColors[index], this.getStockValues(current_stock))\n              ]\n            )\n          }\n        }\n      }\n      else\n      {\n        if(chart_dataset)\n        {\n          // remove the dataset from graph\n          chart.data.datasets.splice(chart.data.datasets.indexOf(chart_dataset), 1);\n        }\n      }\n      chart.update();\n    })\n  }\n\n  componentDidUpdate = () => {\n    this.updateChart();\n  }\n\n  // returns an array of objects, {t: timestamp, y: value}\n  getStockValues = (stock) =>{\n    return stock.history.map((history) => {\n      return {t: new Date(history.time), y: history.value};\n    })\n  }\n\n  // resetZoom = () => {\n  //   this.refs.chart.chartInstance.resetZoom();\n  // }\n\n  render() {\n    return (\n      <div className={'card column p-0'} style={{margin:'10px'}} >\n        <div className='card-header'>\n          <div className='card-header-title'>\n            Graph\n          </div>\n        </div>\n        <div className='card-content'>\n          <p className='is-size-7 has-text-info'>\n            {\n              this.refs.chart &&\n              this.refs.chart.chartInstance.data.datasets.length > 0 ? 'Scroll/pinch to zoom, drag to pan.' : 'Click on any stocks on your left to see graphs.'\n            }\n          </p>\n          <Line\n            data={{datasets: []}}\n            options={chartJsConfig}\n            ref='chart'\n          />\n        </div> \n      </div>\n    );\n  }\n}\n\nexport default StocksGraph;","/Users/mcda/Desktop/Perennia Work/trade/src/components/MarketTrendArrow.jsx",[],"/Users/mcda/Desktop/Perennia Work/trade/src/components/StockRow.jsx",[],"/Users/mcda/Desktop/Perennia Work/trade/src/chartConfig.js",[],"/Users/mcda/Desktop/Perennia Work/trade/src/components/LandingPage.jsx",["105"],"import React, { Component } from 'react'\nimport { Dropdown } from 'react-bootstrap';\nimport './LandingPage.css';\nimport {Avatar} from '@material-ui/core';\nimport LogoutButton from './LogoutButton';\n\nclass LandingPage extends Component{\n    state = {   }\n    render() { \n       return (\n     <div className=\"main-conatianer-header\">\n         {/* Account Logo */}\n         <div className=\"main-conatianer-header-logo\">\n             Company Name\n         </div>\n         {/* icons */}\n         <div className=\"menu-icons\">\n         <div className=\"menu-icons-anchor\">\n           <a href='#'>notification</a>\n         </div>\n         <div className=\"menu-icons-dropdown\">\n            <Dropdown>\n              <Dropdown.Toggle variant='none' className=\"dropdown-basic\">\n                  <Avatar/>\n              </Dropdown.Toggle>\n              <Dropdown.Menu>\n                <Dropdown.Item href=\"/accountsummary\">Account </Dropdown.Item>\n                <Dropdown.Item href=\"/\"><LogoutButton/></Dropdown.Item>\n              </Dropdown.Menu>\n          </Dropdown>\n          </div>\n         </div>\n     </div>\n       );\n    }\n}\nexport default LandingPage;","/Users/mcda/Desktop/Perennia Work/trade/src/components/AccountSummary.jsx",["106","107","108","109"],"import { Button, Card, Col, Container, Row } from 'react-bootstrap';\nimport * as React from 'react';\nimport { Component } from 'react';\nimport './AccountSummary.css';\nimport axios from 'axios';\nimport {Link} from'react-router-dom';\nimport { getUserData } from '../API';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport InfoBox from './common/InfoBox';\nimport LogoutButton from './LogoutButton'\nimport { withAuth0 } from '@auth0/auth0-react';\nimport Loading from '../assets/loading.svg';\n\n class AccountSummary extends Component{\n\n    state = { \n        accountData:null,\n        personalInfo:null,\n        address:null,\n      }\n\n    getDataFromAPI = async () => {\n       return (\n            await axios.get(getUserData).then((res) => {\n\t\t\t            \tif (res.status === 200) {\n                      return (res.data.results[0])\n\t\t\t            \t}\n\t            \t\t}).catch((err) => console.log(err))\n        ) };\n\t\t\n    getUserInfo= (accountData)=>{\n        const {location,picture,name,phone,dob:{age}}=accountData;\n        let address={};\n        let personalInfo={};\n        address['location']=location;\n        personalInfo['image']=picture;\n        personalInfo['name']=name;\n        personalInfo['phone']=phone;\n        personalInfo['age']=age;\n        this.setState({personalInfo,address});\n        return null;\n        \n    }\n\tcomponentDidMount = async () => {\n       let data= await this.getDataFromAPI();\n       this.getUserInfo(data);\n       this.setState({accountData:data})\n\t};\n    render() { \n      console.log(this.props);\n     const {accountData,personalInfo,address}=this.state;\n        return ( \n            <Container className='account-summary-container'>\n                <div className=\"account-summary-main-container\">\n                    <Link to='/dashboard'><i className=\"fa fa-caret-left fa-lg\"></i> Back</Link>\n                <div className=\"account-summary-image\">\n                    {personalInfo ?(<img src={`${personalInfo.image.large}`} alt=\"image\"/>) :(<Skeleton variant=\"circle\" width={200} height={200} />)}\n                </div>\n                <Card.Body className=\"account-summary-card-body\">\n                    <Row className=\"account-summary-personal-information-conatainer\">\n                      <Col lg={4} xs={12} className=\"account-summary-name-information-row\">\n                      {personalInfo?(<InfoBox labelText='NAME' labelClass='account-summary-name-label' contentData={`${personalInfo?.name.title}. ${personalInfo?.name.first}  ${personalInfo?.name.last}`} contentClass='account-summary-name'/> ):(<Skeleton variant=\"rect\" width={200}/>)} \n                      </Col>\n                      <Col lg={4} xs={12} className=\"account-summary-age-information-row\">\n                      {personalInfo?(<InfoBox labelText='AGE' labelClass='account-summary-age-label' contentData={`${personalInfo?.age}`} contentClass='account-summary-age'/>):(<Skeleton variant=\"rect\" width={200}/>)} \n                      </Col>\n                      <Col lg={4} xs={12} className=\"account-summary-phone-information-row\">\n                    {personalInfo?(\n                    ( <InfoBox labelText='PHONE' labelClass='account-summary-phone-label' contentData={`${personalInfo?.phone}`} contentClass='account-summary-phone'/>)\n                  ):(<Skeleton variant=\"rect\" width={200}/>)} \n                  \n                  </Col>\n                    </Row>\n                    <Row className=\"account-summary-address-information-conatainer\">\n                      <Col lg={4} xs={12} className=\"account-summary-street-information-row\">\n                      {address?(\n                        <InfoBox labelText='STREET' labelClass='account-summary-street-label' contentData={`${address?.location.street.number}   ${address?.location.street.name}`} contentClass='account-summary-street'/>\n                      ):(<Skeleton variant=\"rect\" width={200}/>)}\n                      </Col>\n                      <Col lg={4} xs={12} className=\"account-summary-country-information-row\">\n                      {address?(\n                        <InfoBox labelText='CITY' labelClass='account-summary-city-label' contentData={`${address?.location.city}`} contentClass='account-summary-city'/>\n                      ):(<Skeleton variant=\"rect\" width={200}/>)}\n                      </Col>\n                      <Col lg={4} xs={12} className=\"account-summary-state-information-row\"> {address?(\n                        <InfoBox labelText='Country' labelClass='account-summary-country-label' contentData={`${address?.location.country}`} contentClass='account-summary-country'/>\n                      ):(<Skeleton variant=\"rect\" width={200}/>)} </Col>\n                      <Col lg={4} xs={12} className=\"account-summary-country-information-row\">\n                      {address?(\n                        <InfoBox labelText='POSTAL' labelClass='account-summary-postal-label' contentData={`${address?.location.postcode}`} contentClass='account-summary-postal'/>\n                      ):(<Skeleton variant=\"rect\" width={200}/>)}\n                      </Col>\n                    </Row>\n                    <Row className=\"account-summary-signout\">\n                     <LogoutButton/>\n                    </Row>\n                </Card.Body>\n                </div>\n          \n            </Container>\n        );\n    }\n}\n \nexport default withAuth0(AccountSummary);","/Users/mcda/Desktop/Perennia Work/trade/src/API.js",[],"/Users/mcda/Desktop/Perennia Work/trade/src/components/common/InfoBox.jsx",[],"/Users/mcda/Desktop/Perennia Work/trade/src/components/clientStocks/ClientStock.jsx",["110","111"],"import React, { Component } from 'react'\nimport {Card,Button,Table,Row,Col,Form} from 'react-bootstrap'\nimport './ClientStock.css';\nclass ClientStock extends Component {\n    state = { \n        show:false,\n        quantity:null,\n        selectedStock:null,\n        purchasedStocks:[],\n        localUser:null,\n        deafaultAmount:100000,\n     }\n    validation=()=>{\n      let {quantity,selectedStock}=this.state;\n      quantity=parseInt(quantity);\n      if(typeof quantity===\"number\" && quantity>=1 &&quantity<11){\n      if(typeof selectedStock===\"string\" && selectedStock!==null)\n        return true;\n      else \n        return false;\n    }\n      else return false;\n    }\n    buyStocks=()=>{\n      let {quantity,selectedStock,purchasedStocks,deafaultAmount}=this.state;\n      let flag=0;\n      let tempdeafaultAmount=deafaultAmount;\n      const valid=this.validation();\n      quantity=parseInt(quantity);\n       if(valid){\n         let myShares=0,buyingPrice=0;\n         myShares+=quantity;\n        if(Object.keys(purchasedStocks).length===0)\n        {\n          buyingPrice=(this.props.stocks[selectedStock].current_value).toFixed(2);\n          tempdeafaultAmount=tempdeafaultAmount-(buyingPrice*myShares)\n          purchasedStocks[selectedStock]={\"value\":buyingPrice,\"quantity\":quantity, \"myShares\":myShares}\n         }\n         else{\n           //To find the existing stock\n          Object.keys(purchasedStocks).map(stock=>{\n            buyingPrice=(this.props.stocks[selectedStock].current_value).toFixed(2);\n            if(stock===selectedStock)\n            {\n              myShares=purchasedStocks[stock].myShares+purchasedStocks[stock].quantity;\n              tempdeafaultAmount=tempdeafaultAmount-(buyingPrice*myShares)\n              purchasedStocks[selectedStock]={\"value\":buyingPrice,\"quantity\":quantity, \"myShares\":myShares}\n              flag=1;\n            }\n          })\n          //To add the new stock in the existing list\n          if(!flag){\n            tempdeafaultAmount=tempdeafaultAmount-(buyingPrice*myShares)\n            purchasedStocks[selectedStock]={\"value\":buyingPrice,\"quantity\":quantity, \"myShares\":myShares}\n          }\n         }\n            }\n       else{\n         alert(\"Please upload data properly\");\n       }\n      // localStorage.setItem(this.props.user.givenName.toLowerCase(),JSON.stringify(purchasedStocks));\n      this.setState({purchasedStocks,deafaultAmount:tempdeafaultAmount})\n    }\n    sellStocks=(stock)=>{\n     const {deafaultAmount,purchasedStocks}=this.state;\n     const {stocks}=this.props;\n     let currentAmount= this.getAmount(purchasedStocks,deafaultAmount);\n     let currentStockValue=parseInt(stocks[stock].current_value.toFixed(2));\n     const sellAmount=currentStockValue*purchasedStocks[stock].myShares;\n     let tempdeafaultAmount=currentAmount+sellAmount;\n     let temppurchasedStocks={...purchasedStocks};\n     delete(temppurchasedStocks[stock]);\n     this.setState({purchasedStocks:temppurchasedStocks,deafaultAmount:tempdeafaultAmount});\n    }\n    getStockValueColor = (stock) =>{\n      const {stocks}=this.props;\n      const {purchasedStocks}=this.state;\n      let difference=stocks[stock].current_value.toFixed(2)-purchasedStocks[stock].value;\n      if(difference>0){\n        return 'green'\n      }\n      else if(difference<0)\n      {\n        return 'red';\n      }\n      else{\n\n      }\n      // if(stock.current_value < stock.history.slice(-2)[0].value){\n      //   return 'red';\n      // }\n      // else if(stock.current_value > stock.history.slice(-2)[0].value){\n      //   return 'green';\n      // }\n      // else{\n      //   return null;\n      // }\n    }\n    reset=()=>{\n      this.setState({purchasedStocks:[]})\n    }\n    getAmount=(purchasedStocks,deafaultAmount)=>{\n      let totalAmount=0,total=0;\n      if(Object.keys(purchasedStocks).length>0)\n      { \n         Object.keys(purchasedStocks).map((stock)=>{\n            totalAmount=totalAmount+(this.props.stocks[stock].current_value*purchasedStocks[stock].myShares);\n            total=(deafaultAmount)+totalAmount;\n            console.log(total)\n      })\n      return total;\n    }\n    else\n      return deafaultAmount;\n    }\n  \n    render() { \n      const {purchasedStocks,deafaultAmount}=this.state;\n      const {stocks}=this.props;\n      if(this.state.stocks===null) return <h1>Loading...</h1>\n        return (  \n            <>\n        <Card.Body className='client-stock-main-conatiner' >\n        <div className='client-stock-container'>\n           <Row>\n             <Col>\n               <Row className='client-stock-container-row'>\n                    <div className='add-stock-amount'>\n                      <h1>{this.getAmount(purchasedStocks,deafaultAmount).toFixed(2)}</h1>\n                    </div>\n                </Row>\n                <Row>\n                     <div className='container'>\n                      <Form>\n                        <Form.Group>\n                          <Form.Label>Stock</Form.Label>\n                              <Form.Control as=\"select\" custom onChange={(e)=>{this.setState({selectedStock:e.target.value}) }}>\n                                {\n                                  this.props.stocks && Object.keys(this.props.stocks).map((data)=>{\n                                   return <option>{data}</option>\n                                })}\n                              </Form.Control>\n                        </Form.Group>\n                        <Form.Group>\n                          <Form.Label>Quantity</Form.Label>\n                          <Form.Control required type=\"number\"onChange={(e)=>{this.setState({quantity:e.target.value})}} min={0} max={10}/> \n                        </Form.Group>\n                        <Button className='mx-3' onClick={()=>{this.buyStocks()}}>Buy stock</Button>\n                      </Form>\n                   </div>\n                </Row>\n             </Col>\n             <Col xs={12}>\n                 <Card.Body className='client-stock-holding'>\n                   <div className='client-stock-holding-container'> \n                      <div className='client-stock-holdings'>\n                          <h1>My Stocks</h1>\n                      </div>\n                      <div className='client-holdings-reset'>\n                              <Button onClick={()=>{this.reset()}}>Reset</Button>\n                      </div>\n                   </div>\n                   {Object.keys(purchasedStocks).length>0 ? (\n                   <div className='stocks-holding-container'>\n                      <Table striped bordered hover>\n                       <thead>\n                          <tr>\n                            <th>Name</th>\n                            <th>Buy value</th>\n                            <th>\n                              Live Value\n                            </th>\n                            <th>Shares owned</th>\n                            <th>Net Value</th>\n                          </tr>\n                       </thead>\n                       <tbody>\n                         {purchasedStocks && Object.keys(purchasedStocks).map((stock)=>{\n                        return (\n                          <tr> \n                            <td>{stock}</td>\n                        <td>{purchasedStocks[stock].value}</td>\n                            <td>{stocks[stock].current_value.toFixed(2)}</td>\n                            <td>{purchasedStocks[stock].myShares}</td>\n                            <td className={this.getStockValueColor(stock)}>{(stocks[stock].current_value*purchasedStocks[stock].myShares).toFixed(2)}</td>\n                            <td><Button onClick={()=>this.sellStocks(stock)}>sell</Button></td>\n                          </tr>\n                          )\n                          })}  \n                        </tbody>\n                       </Table>\n                   </div> ):(<h2 className='p-3'>No Stocks in your account</h2>)}\n                 </Card.Body>\n            </Col>\n            </Row>\n        </div>\n      </Card.Body>\n      </>\n      );\n    }\n}\n \nexport default ClientStock;","/Users/mcda/Desktop/Perennia Work/trade/src/auth/loginForm.jsx",["112","113","114"],"/Users/mcda/Desktop/Perennia Work/trade/src/AppWithRouterAccess.jsx",[],"/Users/mcda/Desktop/Perennia Work/trade/src/components/LoginButton.jsx",[],"/Users/mcda/Desktop/Perennia Work/trade/src/components/LogoutButton.jsx",[],"/Users/mcda/Desktop/Perennia Work/trade/src/private-route.js",[],{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","severity":1,"message":"120","line":3,"column":18,"nodeType":"121","messageId":"122","endLine":3,"endColumn":31},{"ruleId":"119","severity":1,"message":"123","line":3,"column":45,"nodeType":"121","messageId":"122","endLine":3,"endColumn":55},{"ruleId":"119","severity":1,"message":"124","line":5,"column":8,"nodeType":"121","messageId":"122","endLine":5,"endColumn":19},{"ruleId":"119","severity":1,"message":"125","line":2,"column":13,"nodeType":"121","messageId":"122","endLine":2,"endColumn":18},{"ruleId":"126","severity":1,"message":"127","line":39,"column":30,"nodeType":"128","messageId":"129","endLine":39,"endColumn":32},{"ruleId":"126","severity":1,"message":"127","line":74,"column":66,"nodeType":"128","messageId":"129","endLine":74,"endColumn":68},{"ruleId":"126","severity":1,"message":"127","line":16,"column":60,"nodeType":"128","messageId":"129","endLine":16,"endColumn":62},{"ruleId":"130","severity":1,"message":"131","line":19,"column":12,"nodeType":"132","endLine":19,"endColumn":24},{"ruleId":"119","severity":1,"message":"133","line":1,"column":10,"nodeType":"121","messageId":"122","endLine":1,"endColumn":16},{"ruleId":"119","severity":1,"message":"134","line":12,"column":8,"nodeType":"121","messageId":"122","endLine":12,"endColumn":15},{"ruleId":"119","severity":1,"message":"135","line":51,"column":13,"nodeType":"121","messageId":"122","endLine":51,"endColumn":24},{"ruleId":"136","severity":1,"message":"137","line":57,"column":37,"nodeType":"132","endLine":57,"endColumn":91},{"ruleId":"126","severity":1,"message":"127","line":41,"column":49,"nodeType":"128","messageId":"129","endLine":41,"endColumn":51},{"ruleId":"126","severity":1,"message":"127","line":106,"column":50,"nodeType":"128","messageId":"129","endLine":106,"endColumn":52},{"ruleId":"119","severity":1,"message":"138","line":1,"column":17,"nodeType":"121","messageId":"122","endLine":1,"endColumn":26},{"ruleId":"119","severity":1,"message":"124","line":4,"column":8,"nodeType":"121","messageId":"122","endLine":4,"endColumn":19},{"ruleId":"119","severity":1,"message":"139","line":6,"column":8,"nodeType":"121","messageId":"122","endLine":6,"endColumn":19},"no-native-reassign",["140"],"no-negated-in-lhs",["141"],"no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","'withRouter' is defined but never used.","'GoogleLogin' is defined but never used.","'bulma' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Button' is defined but never used.","'Loading' is defined but never used.","'accountData' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'Component' is defined but never used.","'LoginButton' is defined but never used.","no-global-assign","no-unsafe-negation"]